{"is_source_file": true, "format": "Python", "description": "This is a test suite for the DuckDbTools class, containing unit tests that mock database interactions and verify the behavior of methods related to creating tables, loading data, sanitizing table names, and executing queries within the DuckDbTools module.", "external_files": ["agno.tools.duckdb"], "external_methods": ["agno.tools.duckdb.duckdb.connect", "agno.tools.duckdb.duckdb.Error", "agno.tools.duckdb.duckdb.ProgrammingError"], "published": ["mock_duckdb_connection", "duckdb_tools_instance", "test_create_table_from_path_no_quotes_around_table_name", "test_create_table_from_path_with_replace", "test_create_table_from_path_custom_table_name", "test_load_local_path_to_table_no_quotes", "test_load_local_csv_to_table_no_quotes", "test_load_local_csv_to_table_with_delimiter", "test_load_s3_path_to_table_no_quotes", "test_load_s3_csv_to_table_no_quotes", "test_get_table_name_from_path_special_characters", "test_run_query_success", "test_run_query_removes_backticks", "test_describe_table_success", "test_integration_create_and_query_table", "test_run_query_duckdb_error", "test_run_query_programming_error", "test_run_query_single_column_result", "test_run_query_no_results", "test_custom_table_name_with_special_chars"], "classes": [{"name": "MagicMock", "description": "Mock class used to simulate database objects and query results in tests."}, {"name": "pytest", "description": "Testing framework used for structuring and executing the test cases."}], "methods": [{"name": "mock_duckdb_connection", "description": "Fixture that creates a mocked DuckDB connection object with predefined behavior for testing."}, {"name": "duckdb_tools_instance", "description": "Fixture that instantiates the DuckDbTools class with a mocked database connection."}, {"name": "test_create_table_from_path_no_quotes_around_table_name", "description": "Test that create_table_from_path does not wrap table names in quotes for CSV files."}, {"name": "test_create_table_from_path_with_replace", "description": "Test that create_table_from_path with replace=True generates correct SQL."}, {"name": "test_create_table_from_path_custom_table_name", "description": "Test that a custom table name is used directly without sanitization."}, {"name": "test_load_local_path_to_table_no_quotes", "description": "Test that load_local_path_to_table does not quote the table name."}, {"name": "test_load_local_csv_to_table_no_quotes", "description": "Test that load_local_csv_to_table does not quote the table name."}, {"name": "test_load_local_csv_to_table_with_delimiter", "description": "Test loading CSV with a custom delimiter."}, {"name": "test_load_s3_path_to_table_no_quotes", "description": "Test that S3 path loading does not quote the table name."}, {"name": "test_load_s3_csv_to_table_no_quotes", "description": "Test loading S3 CSV files without quoting table name."}, {"name": "test_get_table_name_from_path_special_characters", "description": "Test sanitization of table names from various file paths with special characters."}, {"name": "test_run_query_success", "description": "Test successful execution and result formatting of run_query."}, {"name": "test_run_query_removes_backticks", "description": "Test that run_query strips backticks from SQL queries."}, {"name": "test_describe_table_success", "description": "Test description of a table returns correct formatted string."}, {"name": "test_integration_create_and_query_table", "description": "Integration test for creating a table and querying it successfully."}, {"name": "test_run_query_duckdb_error", "description": "Test that run_query handles DuckDB errors gracefully."}, {"name": "test_run_query_programming_error", "description": "Test that run_query handles programming errors gracefully."}, {"name": "test_run_query_single_column_result", "description": "Test run_query with a single column result set."}, {"name": "test_run_query_no_results", "description": "Test run_query with an empty result set."}, {"name": "test_custom_table_name_with_special_chars", "description": "Test that custom table names are used as-is without sanitization."}], "calls": ["agno.tools.duckdb.duckdb.connect", "agno.tools.duckdb.duckdb.Error", "agno.tools.duckdb.duckdb.ProgrammingError", "mock_duckdb.connect", "mock_duckdb.sql", "MagicMock", "patch", "pytest"], "search-terms": ["DuckDbTools", "unit tests", "mock database", "create_table_from_path", "load_local_csv_to_table", "load_s3_csv_to_table", "table name sanitization", "query execution", "describe table", "error handling"], "state": 2, "file_id": 625, "knowledge_revision": 2930, "git_revision": "efda5e078bb017731c9dff3802d2cc26a258cd68", "ctags": [], "filename": "libs/agno/tests/unit/tools/test_duckdb.py", "hash": "d2bc0ba48611f5ff57ab44f929d0af30", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2930": "efda5e078bb017731c9dff3802d2cc26a258cd68"}]}