{"is_source_file": true, "format": "Python", "description": "This file contains classes and functions for reading PDF documents, including support for extracting text and images, handling URLs, and asynchronous processing. It defines classes for different PDF reading strategies, such as standard PDF reading, URL-based reading, and image extraction, with support for chunking documents.", "external_files": ["agno.document.base", "agno.document.reader.base", "agno.utils.http", "agno.utils.log", "pypdf", "rapidocr_onnxruntime", "httpx"], "external_methods": ["async_fetch_with_retry", "fetch_with_retry", "log_info", "logger.error", "Document", "Reader", "uuid4", "DocumentReader", "PdfStreamError"], "published": ["BasePDFReader", "PDFReader", "PDFUrlReader", "PDFImageReader", "PDFUrlImageReader"], "classes": [{"name": "BasePDFReader", "description": "Base class providing common functionality for PDF readers, including document chunking."}, {"name": "PDFReader", "description": "Class for reading PDF files from local paths or file-like objects, extracting text per page."}, {"name": "PDFUrlReader", "description": "Class for reading PDF files from URLs, with support for retries and parallel processing."}, {"name": "PDFImageReader", "description": "Class for reading PDFs with extraction of text and images, supporting both sync and async methods."}, {"name": "PDFUrlImageReader", "description": "Class for reading PDFs from URLs with extraction of text and images, supporting both sync and async methods."}], "methods": [{"name": "process_image_page", "description": "Function to process a PDF page, extract text and perform OCR on images to include in the document content."}, {"name": "async_process_image_page", "description": "Asynchronous version of process_image_page, processing images in parallel."}, {"name": "_build_chunked_documents", "description": "Method to split documents into chunks for processing."}, {"name": "read", "description": "Method to read a PDF from a local path or file-like object, extracting text per page."}, {"name": "async_read", "description": "Asynchronous method to read a PDF from a local path or file-like object, extracting text per page."}, {"name": "read", "description": "Method to fetch and read a PDF from a URL, extracting text per page."}, {"name": "async_read", "description": "Asynchronous method to fetch and read a PDF from a URL, extracting text per page."}, {"name": "read", "description": "Method to read a PDF with text and images from a local path or file-like object."}, {"name": "async_read", "description": "Async version of reading a PDF with text and images from a local path or file-like object."}, {"name": "read", "description": "Method to fetch and read a PDF from a URL with text and images extraction."}, {"name": "async_read", "description": "Async method to fetch and read a PDF from a URL with text and images extraction."}], "calls": ["async_fetch_with_retry", "fetch_with_retry", "log_info", "logger.error", "Document", "uuid4", "DocumentReader", "PdfStreamError", "httpx.get"], "search-terms": ["PDF reading", "async PDF processing", "PDF URL reader", "image OCR PDF", "chunked PDF documents", "pypdf", "rapidocr", "PDF page extraction"], "state": 2, "file_id": 359, "knowledge_revision": 2639, "git_revision": "235e19d6998790dd527e8a43710990aef29359b1", "ctags": [], "filename": "libs/agno/agno/document/reader/pdf_reader.py", "hash": "3f0327365f86c991cd3e6b234ead36da", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2639": "235e19d6998790dd527e8a43710990aef29359b1"}]}