{"is_source_file": true, "format": "Python", "description": "This file defines a DynamoDbStorage class for managing session data in DynamoDB, including methods for creating tables, reading, writing, deleting sessions, and schema upgrades. It integrates with AWS boto3 SDK and references session classes for different modes (agent, team, workflow).", "external_files": ["boto3", "botocore.exceptions", "agno.storage.base", "agno.storage.session", "agno.storage.session.agent", "agno.storage.session.team", "agno.storage.session.workflow", "agno.utils.log"], "external_methods": ["boto3.Session", "boto3.resource", "boto3.dynamodb.conditions.Key", "botocore.exceptions.ClientError", "log_debug", "log_info", "logger", "AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict"], "published": ["DynamoDbStorage"], "classes": [{"name": "DynamoDbStorage", "description": "A class for managing session data in DynamoDB, supporting create, read, update, delete, and schema upgrade operations with mode-specific configurations."}], "methods": [{"name": "__init__", "description": "Initializes the DynamoDbStorage with AWS credentials, table name, mode, and optional table creation."}, {"name": "mode", "description": "Property getter for the storage mode ('agent', 'team', 'workflow')."}, {"name": "mode", "description": "Property setter for the storage mode, optionally recreates the table if mode changes."}, {"name": "create", "description": "Creates the DynamoDB table with appropriate key schema and indexes based on mode if it does not exist."}, {"name": "read", "description": "Reads a session from DynamoDB by session_id and optional user_id, returning the appropriate session object."}, {"name": "get_all_session_ids", "description": "Retrieves all session IDs, optionally filtered by user_id or entity_id."}, {"name": "get_all_sessions", "description": "Retrieves all session objects, optionally filtered by user_id or entity_id."}, {"name": "get_recent_sessions", "description": "Retrieves the most recent sessions ordered by creation time, limited by the specified number."}, {"name": "upsert", "description": "Creates or updates a session in DynamoDB, updating timestamps accordingly."}, {"name": "delete_session", "description": "Deletes a session from DynamoDB by session_id."}, {"name": "drop", "description": "Deletes the DynamoDB table."}, {"name": "upgrade_schema", "description": "Placeholder for schema upgrade logic, currently does nothing."}, {"name": "_serialize_item", "description": "Serializes a dictionary to be compatible with DynamoDB, converting floats and nested structures."}, {"name": "_deserialize_item", "description": "Deserializes a DynamoDB item, converting Decimals back to int or float and nested structures."}], "calls": ["boto3.Session", "boto3.resource", "self.dynamodb.meta.client.describe_table", "self.dynamodb.create_table", "self.table.get_item", "self.table.query", "self.table.scan", "self.table.put_item", "self.table.delete_item", "self.table.delete", "self.table.wait_until_exists", "self.table.wait_until_not_exists", "AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict", "log_debug", "log_info", "logger"], "search-terms": ["DynamoDB session storage", "AWS DynamoDB table management", "session management DynamoDB", "boto3 DynamoDB integration", "session create read update delete", "mode-specific DynamoDB schema"], "state": 2, "file_id": 515, "knowledge_revision": 2790, "git_revision": "88b8f942458a148da343660694036160a152bdf2", "ctags": [], "filename": "libs/agno/agno/storage/dynamodb.py", "hash": "952a56b0a82417a3e68782c6dd99122a", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2790": "88b8f942458a148da343660694036160a152bdf2"}]}