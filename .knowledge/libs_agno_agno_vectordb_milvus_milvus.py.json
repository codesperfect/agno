{"is_source_file": true, "format": "Python", "description": "This file defines a Python class 'Milvus' that interfaces with the Milvus vector database, supporting operations such as create, delete, search, insert, and upsert for vector data, including hybrid search with dense and sparse vectors. It manages both synchronous and asynchronous clients, handles schema creation, index setup, and document management, and includes detailed configuration and utility methods.", "external_files": ["pymilvus", "agno.document", "agno.embedder", "agno.reranker.base", "agno.utils.log", "agno.vectordb.base", "agno.vectordb.distance", "agno.vectordb.search"], "external_methods": ["pymilvus.MilvusClient", "pymilvus.AsyncMilvusClient", "pymilvus.DataType", "pymilvus.AnnSearchRequest", "MilvusClient.create_schema", "MilvusClient.create_collection", "MilvusClient.get", "MilvusClient.query", "MilvusClient.insert", "MilvusClient.upsert", "MilvusClient.drop_collection", "MilvusClient.get_collection_stats", "MilvusClient.has_collection", "MilvusClient.prepare_index_params", "AsyncMilvusClient.create_collection", "AsyncMilvusClient.drop_collection", "AsyncMilvusClient.get", "AsyncMilvusClient.search", "AsyncMilvusClient.upsert", "AsyncMilvusClient.create_schema", "AsyncMilvusClient.has_collection", "AsyncMilvusClient.drop_collection"], "published": ["Milvus"], "classes": [{"name": "Milvus", "description": "A class that provides an interface to the Milvus vector database, supporting creation, deletion, search, insertion, and management of vector data, including hybrid search with dense and sparse vectors, with both sync and async methods."}], "methods": [{"name": "client", "description": "Lazily initializes and returns the synchronous Milvus client."}, {"name": "async_client", "description": "Lazily initializes and returns the asynchronous Milvus client."}, {"name": "_get_sparse_vector", "description": "Converts input text into a sparse vector representation using a simple TF-IDF-like scoring."}, {"name": "_create_hybrid_schema", "description": "Creates a schema for hybrid collection with fields for ID, metadata, content, dense vector, and sparse vector."}, {"name": "_prepare_hybrid_index_params", "description": "Prepares index parameters for dense and sparse vector fields."}, {"name": "_prepare_document_data", "description": "Prepares document data for insertion, including embedding and vector representations."}, {"name": "_create_hybrid_collection", "description": "Creates a hybrid collection with schema and index for vector search."}, {"name": "_async_create_hybrid_collection", "description": "Asynchronously creates a hybrid collection with schema and index."}, {"name": "create", "description": "Creates a collection based on the search type if it does not already exist."}, {"name": "async_create", "description": "Asynchronously creates a collection based on the search type if it does not already exist."}, {"name": "doc_exists", "description": "Checks if a document exists in the collection by ID."}, {"name": "async_doc_exists", "description": "Asynchronously checks if a document exists in the collection by ID."}, {"name": "name_exists", "description": "Checks if a document with a given name exists in the collection."}, {"name": "id_exists", "description": "Checks if a document with a given ID exists in the collection."}, {"name": "_insert_hybrid_document", "description": "Inserts a document with both dense and sparse vectors into the collection."}, {"name": "_async_insert_hybrid_document", "description": "Asynchronously inserts a document with both dense and sparse vectors."}, {"name": "insert", "description": "Inserts a list of documents into the collection, handling hybrid or vector-only based on search type."}, {"name": "async_insert", "description": "Asynchronously inserts documents into the collection, handling hybrid or vector-only."}, {"name": "upsert_available", "description": "Indicates that upsert operation is supported (always true)."}, {"name": "upsert", "description": "Upserts a list of documents into the collection."}, {"name": "async_upsert", "description": "Asynchronously upserts documents into the collection."}, {"name": "_get_metric_type", "description": "Returns the string representation of the current distance metric for Milvus."}, {"name": "search", "description": "Performs a vector search, either hybrid or standard, returning matching documents."}, {"name": "async_search", "description": "Performs an asynchronous vector search, either hybrid or standard."}, {"name": "hybrid_search", "description": "Performs a hybrid search combining dense and sparse vectors, with optional reranking."}, {"name": "drop", "description": "Deletes the collection if it exists."}, {"name": "async_drop", "description": "Asynchronously deletes the collection if it exists."}, {"name": "exists", "description": "Checks if the collection exists synchronously."}, {"name": "async_exists", "description": "Checks if the collection exists asynchronously."}, {"name": "get_count", "description": "Returns the number of rows in the collection."}, {"name": "delete", "description": "Deletes the collection."}, {"name": "_build_expr", "description": "Builds a Milvus expression string from filter dictionary."}, {"name": "async_name_exists", "description": "Not implemented; raises NotImplementedError."}], "search-terms": ["Milvus", "vector database", "hybrid search", "dense vector", "sparse vector", "async Milvus client", "vector schema", "vector index", "vector insert", "vector upsert"], "state": 2, "file_id": 559, "knowledge_revision": 2845, "git_revision": "eecd78fd7df7b48c0a75443b80df8640cf3492ca", "ctags": [], "filename": "libs/agno/agno/vectordb/milvus/milvus.py", "hash": "28bb989a62c926ca8eb67528c5f3436b", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2845": "eecd78fd7df7b48c0a75443b80df8640cf3492ca"}]}