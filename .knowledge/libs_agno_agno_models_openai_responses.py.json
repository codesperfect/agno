{"is_source_file": true, "format": "Python", "description": "This file defines the OpenAIResponses class, which provides methods for interacting with OpenAI's Responses API, including request handling, streaming, and response parsing. It manages API clients, request parameters, file uploads, and response processing, serving as an interface between the application and OpenAI's response-based models.", "external_files": ["agnos.exceptions", "agnos.media", "agnos.models.base", "agnos.models.message", "agnos.models.response", "agnos.utils.log", "agnos.utils.models.openai_responses", "agnos.utils.models.schema_utils", "openai", "openai.resources.responses.responses"], "external_methods": ["log_debug", "log_error", "log_warning", "images_to_message", "get_response_schema_for_provider"], "published": ["OpenAIResponses"], "classes": [{"name": "OpenAIResponses", "description": "A class for interacting with OpenAI models using the Responses API, including request management, streaming, and response parsing functionalities."}], "methods": [{"name": "_get_client_params", "description": "Constructs and returns the parameters for creating an OpenAI client, fetching API key from environment if not set."}, {"name": "get_client", "description": "Returns an instance of the OpenAI client, creating it if necessary."}, {"name": "get_async_client", "description": "Returns an asynchronous OpenAI client, creating it if necessary."}, {"name": "get_request_params", "description": "Generates request parameters for API calls based on input messages and configuration."}, {"name": "_upload_file", "description": "Uploads a file to OpenAI's vector database, returning the file ID."}, {"name": "_create_vector_store", "description": "Creates a vector store for uploaded files and waits for completion."}, {"name": "_format_tool_params", "description": "Formats tool parameters, uploads files, and associates them with vector stores."}, {"name": "_format_messages", "description": "Formats messages into the structure expected by OpenAI API."}, {"name": "invoke", "description": "Sends a request to the OpenAI Responses API and returns the response."}, {"name": "ainvoke", "description": "Asynchronously sends a request to the OpenAI Responses API."}, {"name": "invoke_stream", "description": "Streams responses from the OpenAI Responses API synchronously."}, {"name": "ainvoke_stream", "description": "Streams responses from the OpenAI Responses API asynchronously."}, {"name": "format_function_call_results", "description": "Handles the results of function calls, appending them to messages."}, {"name": "parse_provider_response", "description": "Parses the OpenAI response into a ModelResponse object."}, {"name": "_process_stream_response", "description": "Processes individual stream events, updating assistant messages and extracting responses."}, {"name": "process_response_stream", "description": "Processes the response stream synchronously, yielding ModelResponse objects."}, {"name": "aprocess_response_stream", "description": "Processes the response stream asynchronously, yielding ModelResponse objects."}, {"name": "parse_provider_response_delta", "description": "Placeholder method for parsing delta responses, currently unimplemented."}], "calls": ["log_error", "log_debug", "log_warning", "images_to_message", "get_response_schema_for_provider", "self.get_client", "self.get_async_client", "self._get_client_params", "self._format_tool_params", "self._create_vector_store", "self._upload_file", "self.get_request_params", "self._format_messages", "self.get_client().responses.create", "self.get_async_client().responses.create", "self.get_client().responses.create", "self.get_async_client().responses.create", "self.get_client().responses.create", "self.get_async_client().responses.create", "self.get_client().responses.create", "self.get_async_client().responses.create", "self.get_client().responses.create", "self.get_async_client().responses.create", "self.get_client().responses.create", "self.get_async_client().responses.create", "self.get_client().responses.create", "self.get_async_client().responses.create", "self.get_client().responses.create", "self.get_async_client().responses.create"], "search-terms": ["OpenAIResponses", "streaming", "response parsing", "file upload", "vector store", "API request parameters", "response stream", "async API calls", "response handling"], "state": 2, "file_id": 267, "knowledge_revision": 2555, "git_revision": "69e8f9dc474e69f2d3863442c4c1c6824ca37f08", "ctags": [], "filename": "libs/agno/agno/models/openai/responses.py", "hash": "e21bc1fcc58fc31b0beac68d87c769fa", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2555": "69e8f9dc474e69f2d3863442c4c1c6824ca37f08"}]}