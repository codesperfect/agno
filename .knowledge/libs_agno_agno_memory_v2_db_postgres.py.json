{"is_source_file": true, "format": "Python", "description": "This file defines a Python class PostgresMemoryDb that provides an interface for managing a memory store backed by a PostgreSQL table, including methods for creating, reading, updating, deleting, and copying the database table and its data.", "external_files": ["sqlalchemy.dialects.postgresql", "sqlalchemy.engine", "sqlalchemy.inspection", "sqlalchemy.orm", "sqlalchemy.schema", "sqlalchemy.sql.expression", "sqlalchemy.types", "agno.memory.v2.db.base", "agno.memory.v2.db.schema", "agno.utils.log"], "external_methods": ["create_engine", "inspect", "scoped_session", "sessionmaker", "Column", "MetaData", "Table", "delete", "select", "text", "log_debug", "log_info", "logger"], "published": ["PostgresMemoryDb"], "classes": [{"name": "PostgresMemoryDb", "description": "A class that provides an interface to a PostgreSQL-backed memory store, with methods for creating, reading, updating, deleting, and copying memory data stored in a PostgreSQL table."}], "methods": [{"name": "__init__", "description": "Initializes the PostgresMemoryDb instance, setting up database connection, schema, and table."}, {"name": "__dict__", "description": "Returns a dictionary representation of the database instance."}, {"name": "get_table", "description": "Defines and returns the SQLAlchemy Table object representing the memory table."}, {"name": "create", "description": "Creates the schema and table in the database if they do not already exist."}, {"name": "memory_exists", "description": "Checks if a memory with a given ID exists in the table."}, {"name": "read_memories", "description": "Reads and returns a list of MemoryRow objects from the table, with optional filtering by user_id, limit, and sort order."}, {"name": "upsert_memory", "description": "Inserts or updates a memory record in the table."}, {"name": "delete_memory", "description": "Deletes a memory record by its ID."}, {"name": "drop_table", "description": "Drops the memory table from the database."}, {"name": "table_exists", "description": "Checks if the memory table exists in the database."}, {"name": "clear", "description": "Clears all records from the memory table."}, {"name": "__deepcopy__", "description": "Creates a deep copy of the PostgresMemoryDb instance, handling unpickleable attributes."}], "calls": ["create_engine", "inspect", "scoped_session", "sessionmaker", "text", "log_debug", "logger.error", "select", "sess.execute", "sess.begin", "self.table.create", "self.table.drop", "self.table.exists", "self.table.c.id", "self.table.c.user_id", "self.table.c.created_at", "self.table.c.updated_at", "self.table", "self.metadata", "MemoryRow.model_validate"], "search-terms": ["PostgresMemoryDb", "memory store", "PostgreSQL table management", "SQLAlchemy PostgreSQL ORM", "database connection", "upsert memory", "table creation", "deepcopy database object"], "state": 2, "file_id": 108, "knowledge_revision": 2361, "git_revision": "82d1a37c3f4387fd1099df3a7705f37954a8c4a9", "ctags": [], "filename": "libs/agno/agno/memory/v2/db/postgres.py", "hash": "615bf2f06c4890d18a6cc974a16ff79e", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2361": "82d1a37c3f4387fd1099df3a7705f37954a8c4a9"}]}