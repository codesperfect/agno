{"is_source_file": true, "format": "Python", "description": "This file contains test cases for the 'Agent' class and related tools in the 'agno' project, specifically testing tool usage, streaming, async operations, structured outputs, and various tool integrations within the responses API.", "external_files": ["agno.agent", "agno.models.openai", "agno.tools.duckduckgo", "agno.tools.exa", "agno.tools.yfinance"], "external_methods": ["pytest.mark.asyncio", "pytest.mark.skip", "pytest", "assert", "hasattr"], "published": ["test_tool_use", "test_tool_use_stream", "test_async_tool_use", "test_async_tool_use_stream", "test_tool_use_with_native_structured_outputs", "test_parallel_tool_calls", "test_multiple_tool_calls", "test_tool_call_custom_tool_no_parameters", "test_tool_call_list_parameters", "test_web_search_built_in_tool", "test_web_search_built_in_tool_stream", "test_web_search_built_in_tool_with_other_tools", "test_tool_use_with_enum"], "classes": [{"name": "StockPrice", "description": "A Pydantic model representing stock price information with fields for price and currency."}], "methods": [{"name": "test_tool_use", "description": "Tests basic tool usage with the responses API, verifying that the agent can retrieve stock prices."}, {"name": "test_tool_use_stream", "description": "Tests streaming responses with tool usage, checking for tool call events in the stream."}, {"name": "test_async_tool_use", "description": "Tests asynchronous tool usage with the responses API."}, {"name": "test_async_tool_use_stream", "description": "Tests asynchronous streaming with tool usage, verifying event detection."}, {"name": "test_tool_use_with_native_structured_outputs", "description": "Tests structured output handling with a custom data model for stock prices."}, {"name": "test_parallel_tool_calls", "description": "Verifies multiple parallel tool calls and their content."}, {"name": "test_multiple_tool_calls", "description": "Tests multiple different tool types being called within the agent."}, {"name": "test_tool_call_custom_tool_no_parameters", "description": "Tests a custom tool function with no parameters."}, {"name": "test_tool_call_list_parameters", "description": "Tests a tool with list parameters, verifying correct function calls."}, {"name": "test_web_search_built_in_tool", "description": "Tests the built-in web search tool and verifies content and citations."}, {"name": "test_web_search_built_in_tool_stream", "description": "Tests streaming responses from the web search tool, checking for citations."}, {"name": "test_web_search_built_in_tool_with_other_tools", "description": "Verifies combined tool usage with web search and other tools."}, {"name": "test_tool_use_with_enum", "description": "Tests tool invocation with an Enum type argument, verifying correct function call and content."}], "calls": ["agno.agent.Agent", "agno.models.openai.OpenAIResponses", "agno.tools.duckduckgo.DuckDuckGoTools", "agno.tools.exa.ExaTools", "agno.tools.yfinance.YFinanceTools", "pytest.mark.asyncio", "pytest.mark.skip", "assert", "hasattr"], "search-terms": ["test_tool_use", "streaming responses", "structured output", "YFinanceTools", "web search preview", "async tool use", "tool call events", "responses API tests", "agent run", "tool invocation"], "state": 2, "file_id": 791, "knowledge_revision": 3053, "git_revision": "ce752ca313cca5abea84305f90d73dbbd8676a89", "ctags": [], "filename": "libs/agno/tests/integration/models/openai/responses/test_tool_use.py", "hash": "5e705096f8154fc59e0e3fb3533c797b", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"3053": "ce752ca313cca5abea84305f90d73dbbd8676a89"}]}