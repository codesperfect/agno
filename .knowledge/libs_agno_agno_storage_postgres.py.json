{"is_source_file": true, "format": "Python", "description": "This file defines a PostgresStorage class for managing PostgreSQL database interactions, including schema creation, session management, CRUD operations, schema upgrades, and deep copying, specifically tailored for different session types (agent, team, workflow) within a larger application.", "external_files": ["agno/storage/base.py", "agno/storage/session.py", "agno/storage/session/agent.py", "agno/storage/session/team.py", "agno/storage/session/workflow.py", "agno/utils/log.py", "sqlalchemy.dialects.postgresql", "sqlalchemy.engine", "sqlalchemy.inspection", "sqlalchemy.orm", "sqlalchemy.schema", "sqlalchemy.sql.expression", "sqlalchemy.types"], "external_methods": ["create_engine", "inspect", "scoped_session", "sessionmaker", "select", "text", "log_debug", "log_info", "log_warning", "logger"], "published": ["PostgresStorage"], "classes": [{"name": "PostgresStorage", "description": "A class providing PostgreSQL-backed storage for sessions, supporting schema management, CRUD operations, schema upgrades, and deep copying, with mode-specific behavior for agent, team, and workflow sessions."}], "methods": [{"name": "__init__", "description": "Initializes the PostgresStorage with connection parameters, schema info, and mode, setting up database engine, metadata, inspector, and table."}, {"name": "mode", "description": "Getter for the storage mode ('agent', 'team', 'workflow')."}, {"name": "mode", "description": "Setter for the storage mode, updating the table schema accordingly."}, {"name": "get_table_v1", "description": "Defines the table schema for version 1, with mode-specific columns."}, {"name": "get_table", "description": "Returns the current table schema based on the schema version."}, {"name": "table_exists", "description": "Checks if the storage table exists in the database."}, {"name": "create", "description": "Creates the storage table and schema if they do not exist."}, {"name": "read", "description": "Reads a session from the database by session_id and optional user_id."}, {"name": "get_all_session_ids", "description": "Retrieves all session IDs, optionally filtered by user_id and entity_id."}, {"name": "get_all_sessions", "description": "Retrieves all sessions, optionally filtered by user_id and entity_id."}, {"name": "get_recent_sessions", "description": "Retrieves the most recent sessions, limited by a specified number."}, {"name": "upgrade_schema", "description": "Upgrades the database schema to the latest version if auto_upgrade_schema is enabled."}, {"name": "upsert", "description": "Inserts or updates a session in the database, with automatic schema upgrade if needed."}, {"name": "delete_session", "description": "Deletes a session from the database by session_id."}, {"name": "drop", "description": "Drops the storage table from the database."}, {"name": "__deepcopy__", "description": "Creates a deep copy of the PostgresStorage instance, handling unpickleable attributes."}], "calls": ["create_engine", "inspect", "scoped_session", "sessionmaker", "select", "text", "log_debug", "log_info", "log_warning", "logger", "sess.execute", "sess.begin", "sess.commit", "AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict"], "search-terms": ["PostgresStorage", "schema upgrade", "session management", "agent session", "team session", "workflow session", "schema version", "deepcopy", "SQLAlchemy", "PostgreSQL"], "state": 2, "file_id": 518, "knowledge_revision": 2786, "git_revision": "88b8f942458a148da343660694036160a152bdf2", "ctags": [], "filename": "libs/agno/agno/storage/postgres.py", "hash": "029365d59761234810faaf7e98fd7cdf", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2786": "88b8f942458a148da343660694036160a152bdf2"}]}