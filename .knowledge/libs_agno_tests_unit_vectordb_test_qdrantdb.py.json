{"is_source_file": true, "format": "Python", "description": "This is a test suite for the Qdrant vector database integration, including fixtures and unit tests for collection management, document insertion, existence checks, search, and asynchronous operations within the 'agno' project.", "external_files": ["qdrant_client.QdrantClient", "qdrant_client.AsyncQdrantClient", "agno.document.Document", "agno.vectordb.qdrant.Qdrant"], "external_methods": ["qdrant_client.QdrantClient", "qdrant_client.AsyncQdrantClient", "agno.document.Document", "agno.vectordb.qdrant.Qdrant"], "published": ["mock_qdrant_client", "mock_qdrant_async_client", "qdrant_db", "sample_documents", "test_create_collection", "test_exists", "test_drop", "test_insert_documents", "test_doc_exists", "test_name_exists", "test_upsert_documents", "test_search", "test_get_count", "test_async_create", "test_async_exists", "test_async_search"], "classes": [{"name": "Mock", "description": "Mock object used for mocking external dependencies and return values in tests."}], "methods": [{"name": "mock_qdrant_client", "description": "Fixture to create a mock Qdrant client with mocked collection and operation methods."}, {"name": "mock_qdrant_async_client", "description": "Fixture to create a mock asynchronous Qdrant client with mocked collection and operation methods."}, {"name": "qdrant_db", "description": "Fixture to instantiate a Qdrant database object with mocked client and embedder."}, {"name": "sample_documents", "description": "Fixture providing sample Document objects for testing."}, {"name": "test_create_collection", "description": "Unit test for creating a collection in Qdrant."}, {"name": "test_exists", "description": "Unit test for checking if a collection exists."}, {"name": "test_drop", "description": "Unit test for dropping a collection."}, {"name": "test_insert_documents", "description": "Unit test for inserting documents into the collection."}, {"name": "test_doc_exists", "description": "Unit test for checking if a document exists."}, {"name": "test_name_exists", "description": "Unit test for checking if a document name exists."}, {"name": "test_upsert_documents", "description": "Unit test for upserting documents."}, {"name": "test_search", "description": "Unit test for searching documents."}, {"name": "test_get_count", "description": "Unit test for retrieving the count of documents."}, {"name": "test_async_create", "description": "Async test for creating a collection."}, {"name": "test_async_exists", "description": "Async test for checking collection existence."}, {"name": "test_async_search", "description": "Async test for searching documents."}], "calls": ["qdrant_client.QdrantClient", "qdrant_client.AsyncQdrantClient", "qdrant_db.create", "qdrant_db.exists", "qdrant_db.drop", "qdrant_db.insert", "qdrant_db.doc_exists", "qdrant_db.name_exists", "qdrant_db.upsert", "qdrant_db.search", "qdrant_db.get_count", "db.async_create", "db.async_exists", "db.async_search"], "search-terms": ["unit tests", "Qdrant client mock", "vector database testing", "async operations", "collection management", "document insertion", "search results mock", "pytest fixtures"], "state": 2, "file_id": 679, "knowledge_revision": 2947, "git_revision": "a86cd2dd039ed16c37120bc626510a591f4cdf37", "ctags": [], "filename": "libs/agno/tests/unit/vectordb/test_qdrantdb.py", "hash": "5c77fe830ee7913ee46f9f5b6e9013b9", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2947": "a86cd2dd039ed16c37120bc626510a591f4cdf37"}]}