{"is_source_file": true, "format": "Python", "description": "This file implements a Couchbase-based vector database class with methods for creating collections and indexes, inserting, updating, searching documents, and supporting asynchronous operations. It integrates with Couchbase SDKs, handles index management, and provides document retrieval and existence checks.", "external_files": ["agno.document", "agno.embedder", "agno.embedder.openai", "agno.utils.log", "agno.vectordb.base", "acouchbase.bucket", "acouchbase.cluster", "acouchbase.collection", "couchbase.bucket", "couchbase.cluster", "couchbase.collection", "couchbase.exceptions", "couchbase.management.search", "couchbase.n1ql", "couchbase.options", "couchbase.result", "couchbase.scope", "couchbase.search", "couchbase.vector_search"], "external_methods": ["log_debug", "logger", "Cluster.wait_until_ready", "Cluster.search_indexes", "Scope.search_indexes", "SearchIndexManager.get_index", "SearchIndexManager.drop_index", "SearchIndexManager.upsert_index", "SearchIndexManager.get_indexed_documents_count", "Cluster.connect", "AsyncCluster.connect", "AsyncCluster.search_indexes", "AsyncScope.search_indexes", "AsyncSearchIndexManager.get_index", "AsyncSearchIndexManager.drop_index", "AsyncSearchIndexManager.upsert_index", "AsyncSearchIndexManager.get_indexed_documents_count", "AsyncCluster.connect", "AsyncBucket.collections", "AsyncScope.collections", "AsyncCollection.insert", "AsyncCollection.upsert", "AsyncCollection.exists", "AsyncCollection.get", "AsyncScope.query", "AsyncScope.get_all_scopes", "AsyncBucket.collections", "AsyncCluster.search_indexes", "AsyncScope.search_indexes", "AsyncSearchIndexManager.get_index", "AsyncSearchIndexManager.drop_index", "AsyncSearchIndexManager.upsert_index", "AsyncSearchIndexManager.get_indexed_documents_count"], "published": ["CouchbaseSearch"], "classes": [{"name": "CouchbaseSearch", "description": "A class implementing a vector database using Couchbase, supporting index management, document CRUD operations, and search functionalities with both synchronous and asynchronous methods."}], "methods": [{"name": "__init__", "description": "Initializes the CouchbaseSearch with connection details, index configuration, and options."}, {"name": "cluster", "description": "Creates or retrieves the Couchbase cluster connection."}, {"name": "bucket", "description": "Retrieves the Couchbase bucket instance."}, {"name": "scope", "description": "Retrieves the scope within the bucket."}, {"name": "collection", "description": "Retrieves the collection within the scope."}, {"name": "_create_collection_and_scope", "description": "Ensures the scope and collection exist, creating or dropping as needed based on overwrite flag."}, {"name": "_search_indexes_mng", "description": "Returns the search index manager for the current scope or cluster."}, {"name": "_create_fts_index", "description": "Creates or updates the FTS index if it doesn't exist or overwrite is specified."}, {"name": "_wait_for_index_ready", "description": "Waits until the FTS index is ready."}, {"name": "create", "description": "Creates the collection and index."}, {"name": "doc_exists", "description": "Checks if a document exists based on its content hash."}, {"name": "insert", "description": "Inserts documents into the collection, failing if they already exist."}, {"name": "upsert", "description": "Updates or inserts documents into the collection."}, {"name": "search", "description": "Performs a vector search for a query string."}, {"name": "__get_doc_from_kv", "description": "Converts search results into Document objects by fetching full documents from KV store."}, {"name": "drop", "description": "Drops the collection."}, {"name": "delete", "description": "Deletes the collection if it exists."}, {"name": "exists", "description": "Checks if the collection exists."}, {"name": "prepare_doc", "description": "Prepares a Document object for insertion, generating embedding and ID."}, {"name": "get_count", "description": "Returns the count of documents in the index."}, {"name": "name_exists", "description": "Checks if a document with a given name exists."}, {"name": "id_exists", "description": "Checks if a document with a given ID exists."}, {"name": "async_create", "description": "Asynchronously creates collection and index."}, {"name": "_async_create_collection_and_scope", "description": "Asynchronously ensures scope and collection exist, creating or dropping as needed."}, {"name": "_get_async_search_indexes_mng", "description": "Returns the async search index manager."}, {"name": "_async_create_fts_index", "description": "Creates or updates the FTS index asynchronously."}, {"name": "_async_wait_for_index_ready", "description": "Asynchronously waits until the index is ready."}, {"name": "async_doc_exists", "description": "Asynchronously checks if a document exists based on content hash."}, {"name": "async_id_exists", "description": "Asynchronously checks if a document with a given ID exists."}, {"name": "async_name_exists", "description": "Asynchronously checks if a document with a given name exists."}, {"name": "async_insert", "description": "Asynchronously inserts documents, handling concurrency."}, {"name": "async_upsert", "description": "Asynchronously upserts documents."}, {"name": "async_search", "description": "Performs an asynchronous vector search."}, {"name": "__async_get_doc_from_kv", "description": "Converts async search results into Document objects by fetching from KV store concurrently."}, {"name": "async_drop", "description": "Asynchronously drops the collection."}, {"name": "async_exists", "description": "Asynchronously checks if the collection exists."}], "calls": ["logger.debug", "logger.info", "logger.error", "logger.warning", "Cluster.wait_until_ready", "Cluster.search_indexes", "Scope.search_indexes", "SearchIndexManager.get_index", "SearchIndexManager.drop_index", "SearchIndexManager.upsert_index", "SearchIndexManager.get_indexed_documents_count", "AsyncCluster.connect", "AsyncBucket.collections", "AsyncScope.collections", "AsyncCollection.insert", "AsyncCollection.upsert", "AsyncCollection.exists", "AsyncCollection.get", "AsyncScope.query", "AsyncScope.get_all_scopes", "AsyncBucket.collections", "AsyncCluster.search_indexes", "AsyncScope.search_indexes", "AsyncSearchIndexManager.get_index", "AsyncSearchIndexManager.drop_index", "AsyncSearchIndexManager.upsert_index", "AsyncSearchIndexManager.get_indexed_documents_count", "asyncio.gather", "asyncio.sleep"], "search-terms": ["Couchbase", "vector database", "FTS index", "async operations", "collection management", "search index management", "document insertion", "document search", "index creation", "async cluster", "async collection", "async scope"], "state": 2, "file_id": 581, "knowledge_revision": 2875, "git_revision": "eecd78fd7df7b48c0a75443b80df8640cf3492ca", "ctags": [], "filename": "libs/agno/agno/vectordb/couchbase/couchbase.py", "hash": "8ab079fd9286bcf00aa17bfdbd44cd35", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2875": "eecd78fd7df7b48c0a75443b80df8640cf3492ca"}]}