{"is_source_file": true, "format": "Python", "description": "This file defines a set of classes and functions related to handling callable functions within an agent framework, including function metadata, execution, caching, and hook management.", "external_files": ["agno.exceptions", "agno.utils.log", "agno.utils.json_schema"], "external_methods": ["log_debug", "log_error", "log_exception", "log_warning", "get_json_schema"], "published": ["Function", "FunctionCall", "FunctionExecutionResult", "get_entrypoint_docstring", "UserInputField"], "classes": [{"name": "UserInputField", "description": "Represents a user input field with name, type, description, and value."}, {"name": "Function", "description": "Model representing a callable function with metadata, parameters, hooks, and execution logic."}, {"name": "FunctionExecutionResult", "description": "Represents the result of executing a function, including status, result, and error."}, {"name": "FunctionCall", "description": "Encapsulates a function call with arguments, result, and hooks for pre- and post-processing."}], "methods": [{"name": "get_entrypoint_docstring", "description": "Extracts and combines short and long descriptions from a function's docstring."}, {"name": "from_callable", "description": "Creates a Function instance from a Python callable, generating schema and metadata."}, {"name": "process_entrypoint", "description": "Prepares the function's entrypoint for execution, including schema generation and validation."}, {"name": "_wrap_callable", "description": "Wraps a callable with Pydantic's validate_call decorator for validation."}, {"name": "process_schema_for_strict", "description": "Adjusts the function's schema to disallow additional properties and set required fields."}, {"name": "_get_cache_key", "description": "Generates a cache key based on function name and arguments."}, {"name": "_get_cache_file_path", "description": "Determines the file path for caching results based on cache key."}, {"name": "_get_cached_result", "description": "Retrieves a cached result if it exists and is valid."}, {"name": "_save_to_cache", "description": "Saves a result to cache with timestamp."}, {"name": "execute", "description": "Runs the function synchronously, managing hooks, caching, and error handling."}, {"name": "aexecute", "description": "Runs the function asynchronously, managing hooks, caching, and error handling."}, {"name": "_build_nested_execution_chain", "description": "Builds a nested chain of hook executions for sync functions."}, {"name": "_build_nested_execution_chain_async", "description": "Builds a nested chain of hook executions for async functions."}, {"name": "_handle_pre_hook", "description": "Executes the pre-hook synchronously."}, {"name": "_handle_post_hook", "description": "Executes the post-hook synchronously."}, {"name": "_handle_pre_hook_async", "description": "Executes the pre-hook asynchronously."}, {"name": "_handle_post_hook_async", "description": "Executes the post-hook asynchronously."}], "calls": ["log_debug", "log_warning", "log_exception", "log_error", "get_json_schema", "getdoc"], "search-terms": ["Function class", "FunctionCall handling", "hook management", "caching mechanism", "async function execution", "schema generation", "callable validation", "agent function interface"], "state": 2, "file_id": 408, "knowledge_revision": 2674, "git_revision": "de4f484df0a97ba767f52dcde416048a0cdfa54e", "ctags": [], "filename": "libs/agno/agno/tools/function.py", "hash": "0376f361827e65816f72002f62895ce1", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2674": "de4f484df0a97ba767f52dcde416048a0cdfa54e"}]}