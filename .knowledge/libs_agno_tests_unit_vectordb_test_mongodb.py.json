{"is_source_file": true, "format": "Python", "description": "This is a test module for the MongoDB vector database integration, including mock fixtures, unit tests for CRUD operations, search, and async methods within the 'agno' package.", "external_files": ["pymongo", "pytest", "uuid", "hashlib", "typing", "unittest.mock"], "external_methods": ["pymongo.MongoClient", "pymongo.collection.Collection", "pymongo.database.Database", "agno.document.Document", "agno.vectordb.mongodb.MongoDb"], "published": [], "classes": [{"name": "AsyncCursor", "description": "A mock asynchronous cursor for simulating async iteration over MongoDB query results."}], "methods": [{"name": "mock_embedder", "description": "Creates a mock embedder object with predefined dimensions and embedding values."}, {"name": "mock_mongodb_client", "description": "Creates a mock MongoDB client with patched methods for testing."}, {"name": "mock_async_mongodb_client", "description": "Creates a mock asynchronous MongoDB client with patched methods for testing."}, {"name": "vector_db", "description": "Creates a test instance of the MongoDb class with a mock client and embedder."}, {"name": "async_vector_db", "description": "Creates a test instance of the MongoDb class for async testing with a mock async client."}, {"name": "create_test_documents", "description": "Generates a list of test Document objects for use in unit tests."}, {"name": "test_initialization", "description": "Tests the initialization of the MongoDb class, including error handling for invalid parameters."}, {"name": "test_insert_and_search", "description": "Tests inserting documents and performing a search query in the MongoDB vector database."}, {"name": "test_document_existence", "description": "Checks the existence of documents by object, name, and ID."}, {"name": "test_upsert", "description": "Tests the upsert (update or insert) functionality for documents."}, {"name": "test_delete", "description": "Verifies the delete operation clears the collection."}, {"name": "test_exists", "description": "Checks whether the collection exists in the database."}, {"name": "test_search_with_filters", "description": "Performs a search with filters applied and verifies the query pipeline."}, {"name": "test_async_client", "description": "Tests the asynchronous creation of a MongoDB client."}, {"name": "test_async_get_collection", "description": "Tests retrieving a collection asynchronously."}, {"name": "test_async_doc_exists", "description": "Checks asynchronously if a document exists in the collection."}, {"name": "test_async_insert", "description": "Tests asynchronous insertion of documents."}, {"name": "test_async_search", "description": "Performs an asynchronous search and verifies results."}, {"name": "test_async_exists", "description": "Checks asynchronously if the collection exists."}, {"name": "test_async_name_exists", "description": "Checks asynchronously if a document with a specific name exists."}, {"name": "test_async_upsert", "description": "Tests asynchronous upsert operation."}, {"name": "test_async_drop", "description": "Verifies dropping a collection asynchronously."}], "calls": ["pymongo.MongoClient", "pymongo.collection.Collection", "pymongo.database.Database", "agno.document.Document", "agno.vectordb.mongodb.MongoDb", "patch", "MagicMock", "AsyncMock"], "search-terms": ["MongoDb", "vectordb", "unit tests", "async MongoDB", "mock fixtures", "test_mongodb.py", "vector search", "collection existence", "document existence", "async insert", "async search"], "state": 2, "file_id": 675, "knowledge_revision": 2919, "git_revision": "65b51199867b9c95a09bfe7c4c91e56b8126e675", "ctags": [], "filename": "libs/agno/tests/unit/vectordb/test_mongodb.py", "hash": "e53d525140de272371428b1bbcd52726", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2919": "65b51199867b9c95a09bfe7c4c91e56b8126e675"}]}