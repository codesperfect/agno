{"is_source_file": true, "format": "Python", "description": "This file defines a class PgMemoryDb that provides an interface for managing a memory store backed by a PostgreSQL database table, including methods for creating, reading, updating, deleting, and checking existence of memory records, as well as handling database schema and table management.", "external_files": ["agno.memory.db.base", "agno.memory.row", "agno.utils.log"], "external_methods": ["sqlalchemy.create_engine", "sqlalchemy.inspect", "sqlalchemy.orm.scoped_session", "sqlalchemy.orm.sessionmaker", "sqlalchemy.schema.Column", "sqlalchemy.schema.MetaData", "sqlalchemy.schema.Table", "sqlalchemy.sql.expression.delete", "sqlalchemy.sql.expression.select", "sqlalchemy.sql.expression.text", "sqlalchemy.types.DateTime", "sqlalchemy.types.String"], "published": ["PgMemoryDb"], "classes": [{"name": "PgMemoryDb", "description": "A class that provides a PostgreSQL-backed in-memory database with methods for CRUD operations, schema management, and deep copying."}], "methods": [{"name": "__init__", "description": "Initializes the PgMemoryDb instance, setting up database connection, schema, and table."}, {"name": "get_table", "description": "Defines and returns the SQLAlchemy Table object representing the memory table."}, {"name": "create", "description": "Creates the schema and table in the database if they do not exist."}, {"name": "memory_exists", "description": "Checks if a given MemoryRow exists in the database."}, {"name": "read_memories", "description": "Reads memory records from the database, optionally filtered by user_id, limited, and sorted."}, {"name": "upsert_memory", "description": "Inserts or updates a MemoryRow in the database."}, {"name": "delete_memory", "description": "Deletes a memory record by its ID."}, {"name": "drop_table", "description": "Drops the memory table from the database."}, {"name": "table_exists", "description": "Checks if the memory table exists in the database."}, {"name": "clear", "description": "Deletes all records from the memory table."}, {"name": "__deepcopy__", "description": "Creates a deep copy of the PgMemoryDb instance, handling unpickleable attributes."}], "calls": ["sqlalchemy.create_engine", "sqlalchemy.inspect", "sqlalchemy.orm.scoped_session", "sqlalchemy.orm.sessionmaker", "sqlalchemy.schema.Table", "sqlalchemy.schema.Column", "sqlalchemy.sql.expression.select", "sqlalchemy.sql.expression.text", "sqlalchemy.sql.expression.delete", "sqlalchemy.dialects.postgresql.insert", "log_debug", "logger.error"], "search-terms": ["PostgreSQL memory store", "SQLAlchemy table management", "MemoryRow persistence", "schema creation", "upsert operation", "deepcopy database object"], "state": 2, "file_id": 119, "knowledge_revision": 2367, "git_revision": "9dbbb3aad1441a6e4286c02f3d75b29a74dd3623", "ctags": [], "filename": "libs/agno/agno/memory/db/postgres.py", "hash": "6c207879384244daf751e66a7b3927de", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2367": "9dbbb3aad1441a6e4286c02f3d75b29a74dd3623"}]}