{"is_source_file": true, "format": "Python", "description": "This file defines the SingleStoreStorage class, a specialized storage handler for a SingleStore (MySQL-compatible) database, including methods for schema management, CRUD operations, and session handling within a larger application.", "external_files": ["agno.storage.base", "agno.storage.session", "agno.storage.session.agent", "agno.storage.session.team", "agno.storage.session.workflow", "agno.utils.log", "sqlalchemy.dialects", "sqlalchemy.engine", "sqlalchemy.engine.row", "sqlalchemy.inspection", "sqlalchemy.orm", "sqlalchemy.schema", "sqlalchemy.sql.expression"], "external_methods": ["create_engine", "inspect", "select", "text", "Session.from_dict", "AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict", "log_debug", "log_info", "log_warning", "logger.error"], "published": ["SingleStoreStorage"], "classes": [{"name": "SingleStoreStorage", "description": "A storage handler class for managing sessions and data in a SingleStore database, supporting schema upgrades, CRUD operations, and session retrieval."}], "methods": [{"name": "__init__", "description": "Initializes the SingleStoreStorage with database connection parameters, schema info, and mode."}, {"name": "get_table_v1", "description": "Constructs and returns the table schema for schema version 1 based on the current mode."}, {"name": "get_table", "description": "Returns the appropriate table schema based on the schema version."}, {"name": "table_exists", "description": "Checks if the storage table exists in the database."}, {"name": "create", "description": "Creates the storage table in the database if it does not exist."}, {"name": "_read", "description": "Reads a session row from the database by session ID and optional user ID."}, {"name": "read", "description": "Retrieves a session object by session ID and optional user ID."}, {"name": "get_all_session_ids", "description": "Fetches all session IDs for a given user and entity."}, {"name": "get_all_sessions", "description": "Fetches all session objects for a given user and entity."}, {"name": "get_recent_sessions", "description": "Retrieves the most recent sessions up to a specified limit."}, {"name": "upgrade_schema", "description": "Performs schema upgrades, such as adding columns, if auto_upgrade_schema is enabled."}, {"name": "upsert", "description": "Inserts or updates a session record in the database."}, {"name": "delete_session", "description": "Deletes a session record by session ID."}, {"name": "drop", "description": "Drops the storage table from the database."}, {"name": "__deepcopy__", "description": "Creates a deep copy of the storage instance, handling unpickleable attributes."}], "calls": ["create_engine", "inspect", "select", "text", "Session.from_dict", "AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict", "log_debug", "log_info", "log_warning", "logger.error"], "search-terms": ["SingleStore", "session management", "schema upgrade", "session CRUD", "MySQL storage", "agent, team, workflow modes", "session upsert", "schema versioning"], "state": 2, "file_id": 533, "knowledge_revision": 2815, "git_revision": "88b8f942458a148da343660694036160a152bdf2", "ctags": [], "filename": "libs/agno/agno/storage/singlestore.py", "hash": "043bacafffaa8dfd37abc18cc5b0421f", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2815": "88b8f942458a148da343660694036160a152bdf2"}]}