{"is_source_file": true, "format": "Python", "description": "This file contains unit tests for the schema_utils module, testing schema normalization functions and schema generation for different models and providers.", "external_files": ["agno.utils.models.schema_utils"], "external_methods": ["_normalize_for_gemini", "_normalize_for_openai", "get_dict_value_type", "get_response_schema_for_provider", "is_dict_field"], "published": [], "classes": [{"name": "SimpleModel", "description": "A simple Pydantic model with name and age fields."}, {"name": "DictModel", "description": "A Pydantic model with various dictionary fields for testing schema handling."}, {"name": "ComplexModel", "description": "A complex Pydantic model with mixed field types including optional and list fields."}], "methods": [{"name": "test_is_dict_field_positive", "description": "Tests that is_dict_field correctly identifies a dictionary schema with additionalProperties."}, {"name": "test_is_dict_field_negative_regular_object", "description": "Tests that is_dict_field correctly rejects a regular object schema without additionalProperties."}, {"name": "test_is_dict_field_negative_additional_properties_false", "description": "Tests that is_dict_field correctly rejects an object schema with additionalProperties set to False."}, {"name": "test_is_dict_field_negative_no_additional_properties", "description": "Tests that is_dict_field correctly rejects an object schema without additionalProperties."}, {"name": "test_get_dict_value_type", "description": "Tests that get_dict_value_type correctly extracts value types from dictionary schemas."}, {"name": "test_get_dict_value_type_non_dict", "description": "Tests that get_dict_value_type returns default type for non-dictionary schemas."}, {"name": "test_normalize_for_openai", "description": "Tests that _normalize_for_openai excludes dictionary fields from required list and preserves additionalProperties."}, {"name": "test_normalize_for_gemini", "description": "Tests that _normalize_for_gemini preserves dictionary field info and enhances description."}, {"name": "test_get_response_schema_for_provider_openai", "description": "Tests schema generation for OpenAI provider, ensuring dict fields are handled correctly."}, {"name": "test_get_response_schema_for_provider_gemini", "description": "Tests schema generation for Gemini provider, ensuring dict fields are preserved."}, {"name": "test_get_response_schema_for_provider_unknown", "description": "Tests schema generation for an unknown provider, ensuring basic structure and removal of null defaults."}, {"name": "test_complex_model_schema_handling", "description": "Tests schema handling with mixed field types, ensuring required fields and dict structure are correct."}, {"name": "test_simple_model_schema_handling", "description": "Tests schema handling for a simple model with no dict fields, ensuring all fields are required."}, {"name": "test_multiple_dict_types", "description": "Tests handling multiple dictionary field types and their exclusion from required fields."}], "calls": ["agno.utils.models.schema_utils._normalize_for_gemini", "agno.utils.models.schema_utils._normalize_for_openai", "agno.utils.models.schema_utils.get_dict_value_type", "agno.utils.models.schema_utils.get_response_schema_for_provider", "agno.utils.models.schema_utils.is_dict_field"], "search-terms": ["schema_utils", "pydantic models", "dict schema handling", "schema normalization", "provider-specific schema", "unit tests"], "state": 2, "file_id": 604, "knowledge_revision": 2842, "git_revision": "fadab820eeb5c0e4b511274ebb4ad8312704e972", "ctags": [], "filename": "libs/agno/tests/unit/utils/test_schema_utils.py", "hash": "f53d340475fb9a608d185c245df1730a", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2842": "fadab820eeb5c0e4b511274ebb4ad8312704e972"}]}