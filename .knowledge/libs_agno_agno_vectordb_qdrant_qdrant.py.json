{"is_source_file": true, "format": "Python", "description": "This file implements a Vector Database interface for Qdrant, providing methods for creating, checking existence, inserting, searching, and deleting collections, with support for synchronous and asynchronous operations. It defines a Qdrant class that extends a base VectorDb class, managing client instances, embedding documents, and performing vector and hybrid searches.", "external_files": ["qdrant_client", "agno.document", "agno.embedder", "agno.reranker.base", "agno.utils.log", "agno.vectordb.base", "agno.vectordb.distance", "agno.vectordb.search"], "external_methods": ["qdrant_client.QdrantClient", "qdrant_client.AsyncQdrantClient", "qdrant_client.http.models", "agno.document.Document", "agno.embedder.Embedder", "agno.reranker.base.Reranker", "agno.utils.log.log_debug", "agno.utils.log.log_info", "agno.vectordb.base.VectorDb", "agno.vectordb.distance.Distance", "agno.vectordb.search.SearchType"], "published": ["Qdrant"], "classes": [{"name": "Qdrant", "description": "A class implementing a vector database interface powered by Qdrant, supporting collection management, document insertion, search, and deletion with both sync and async methods."}], "methods": [{"name": "__init__", "description": "Initializes the Qdrant vector database with configuration options, including collection name, embedder, distance metric, connection parameters, search type, and optional reranker."}, {"name": "client", "description": "Lazily creates and returns a QdrantClient instance for synchronous operations."}, {"name": "async_client", "description": "Lazily creates and returns an AsyncQdrantClient instance for asynchronous operations."}, {"name": "create", "description": "Creates a collection in Qdrant with appropriate vector configurations based on search type and distance metric."}, {"name": "async_create", "description": "Asynchronously creates a collection in Qdrant with appropriate vector configurations."}, {"name": "doc_exists", "description": "Checks if a document exists in the collection by its content hash."}, {"name": "async_doc_exists", "description": "Asynchronously checks if a document exists in the collection."}, {"name": "name_exists", "description": "Checks if a document with a specific name exists in the collection."}, {"name": "async_name_exists", "description": "Asynchronously checks if a document with a specific name exists."}, {"name": "insert", "description": "Inserts a list of documents into the collection, with optional filters and batching."}, {"name": "async_insert", "description": "Asynchronously inserts documents into the collection."}, {"name": "upsert", "description": "Upserts documents into the collection by redirecting to insert method."}, {"name": "async_upsert", "description": "Asynchronously upserts documents into the collection."}, {"name": "search", "description": "Performs a search query on the collection, returning matching documents based on vector, keyword, or hybrid search."}, {"name": "async_search", "description": "Performs an asynchronous search query."}, {"name": "_run_hybrid_search_sync", "description": "Performs a hybrid search synchronously using vector and sparse components."}, {"name": "_run_vector_search_sync", "description": "Performs a vector similarity search synchronously."}, {"name": "_run_keyword_search_sync", "description": "Performs a keyword (sparse vector) search synchronously."}, {"name": "_run_vector_search_async", "description": "Performs an asynchronous vector similarity search."}, {"name": "_run_keyword_search_async", "description": "Performs an asynchronous keyword search."}, {"name": "_run_hybrid_search_async", "description": "Performs an asynchronous hybrid search."}, {"name": "_build_search_results", "description": "Converts search results into Document objects, optionally reranking them."}, {"name": "_format_filters", "description": "Converts a dictionary of filters into a Qdrant models.Filter object."}, {"name": "drop", "description": "Deletes the collection if it exists."}, {"name": "async_drop", "description": "Asynchronously deletes the collection."}, {"name": "exists", "description": "Checks if the collection exists synchronously."}, {"name": "async_exists", "description": "Checks if the collection exists asynchronously."}, {"name": "get_count", "description": "Returns the count of documents in the collection."}, {"name": "optimize", "description": "Placeholder for optimization logic (currently does nothing)."}, {"name": "delete", "description": "Deletes the collection and returns success status."}], "calls": ["qdrant_client.QdrantClient", "qdrant_client.AsyncQdrantClient", "log_debug", "log_info", "models.VectorParams", "models.SparseVectorParams", "models.Fusion", "models.Distance", "models.Filter", "models.PointStruct", "models.Prefetch", "models.SparseVector", "models.FusionQuery", "models.CountResult", "md5"], "search-terms": ["Qdrant", "vector database", "collection management", "async operations", "hybrid search", "sparse vectors", "vector similarity", "document insertion", "collection creation", "search filters"], "state": 2, "file_id": 588, "knowledge_revision": 2854, "git_revision": "e9d640f53cf3d31e832d06e920c937bf2a365193", "ctags": [], "filename": "libs/agno/agno/vectordb/qdrant/qdrant.py", "hash": "f4dbf00933c28376cbe685023088b938", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2854": "e9d640f53cf3d31e832d06e920c937bf2a365193"}]}