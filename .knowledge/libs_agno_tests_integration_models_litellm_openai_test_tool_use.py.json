{"is_source_file": true, "format": "Python", "description": "This is a test script for the 'agent' module, testing tool usage, streaming, asynchronous calls, and custom tools within the 'litellm_openai' context, specifically for the 'test_tool_use.py' in the 'agno' project.", "external_files": ["agno.agent", "agno.models.litellm", "agno.tools.duckduckgo", "agno.tools.yfinance"], "external_methods": ["pytest", "pytest.mark.asyncio"], "published": ["test_tool_use", "test_tool_use_stream", "test_async_tool_use", "test_async_tool_use_streaming", "test_parallel_tool_calls", "test_multiple_tool_calls", "test_tool_call_custom_tool_no_parameters", "test_tool_call_custom_tool_untyped_parameters"], "classes": [], "methods": [{"name": "_assert_metrics", "description": "Helper function to assert that the response metrics contain required fields and are consistent."}, {"name": "test_tool_use", "description": "Tests the tool use functionality with a LiteLLM proxy, verifying response content, message count, and metrics."}, {"name": "test_tool_use_stream", "description": "Tests streaming tool use with LiteLLM, checking for tool call detection and content inclusion."}, {"name": "test_async_tool_use", "description": "Asynchronous test for tool use, verifying response content, message count, and metrics."}, {"name": "test_async_tool_use_streaming", "description": "Asynchronous streaming test for tool use, checking for tool call detection and content inclusion."}, {"name": "test_parallel_tool_calls", "description": "Tests parallel tool calls, verifying multiple tool calls and content correctness."}, {"name": "test_multiple_tool_calls", "description": "Tests multiple different tools being called within a single run, verifying content and metrics."}, {"name": "test_tool_call_custom_tool_no_parameters", "description": "Tests a custom tool without parameters, verifying tool call detection and response content."}, {"name": "test_tool_call_custom_tool_untyped_parameters", "description": "Tests a custom untyped tool with parameters, verifying tool call detection and response content."}], "calls": ["agno.agent.Agent", "agno.agent.RunResponse", "agno.models.litellm.LiteLLMOpenAI", "agno.tools.duckduckgo.DuckDuckGoTools", "agno.tools.yfinance.YFinanceTools", "pytest", "pytest.mark.asyncio"], "search-terms": ["litellm_openai", "test_tool_use", "asyncio", "streaming", "custom tools", "tool calls", "metrics validation", "agent run"], "state": 2, "file_id": 731, "knowledge_revision": 2997, "git_revision": "777260577abc1ec1fbdfa141f65351510b5775ee", "ctags": [], "filename": "libs/agno/tests/integration/models/litellm_openai/test_tool_use.py", "hash": "defb78067fea250c85adfb80b76e3d8c", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2997": "777260577abc1ec1fbdfa141f65351510b5775ee"}]}