{"is_source_file": true, "format": "Python", "description": "This file implements a Firestore-based storage backend for managing sessions, including CRUD operations, querying, and schema management, with integration to Google Cloud Firestore.", "external_files": ["agno.storage.base", "agno.storage.session", "agno.storage.session.agent", "agno.storage.session.team", "agno.storage.session.workflow", "agno.utils.log", "google.api_core.exceptions", "google.cloud.firestore_v1", "google.cloud.firestore_v1.base_query"], "external_methods": ["AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict", "log_debug", "logger.error"], "published": ["FirestoreStorage"], "classes": [{"name": "FirestoreStorage", "description": "A storage class that interfaces with Google Cloud Firestore to store and retrieve session data, supporting various session types and operations."}], "methods": [{"name": "__init__", "description": "Initializes the FirestoreStorage with collection name, database, project ID, client, and mode."}, {"name": "_initialize_client", "description": "Creates and returns a Firestore client with error handling for authentication and permission issues."}, {"name": "_delete_document", "description": "Recursively deletes a document and its subcollections from Firestore."}, {"name": "_delete_collection", "description": "Recursively deletes all documents in a collection."}, {"name": "_build_query", "description": "Builds a Firestore query with optional filters based on user_id and entity_id."}, {"name": "_parse_session", "description": "Parses document data into the appropriate Session subclass based on mode."}, {"name": "create", "description": "Creates the storage, primarily by verifying connection to Firestore."}, {"name": "read", "description": "Reads a session by session_id and optional user_id from Firestore."}, {"name": "get_all_session_ids", "description": "Retrieves all session IDs, optionally filtered by user_id and entity_id, sorted by creation time."}, {"name": "get_all_sessions", "description": "Retrieves all sessions, optionally filtered, sorted by creation time."}, {"name": "get_recent_sessions", "description": "Retrieves the most recent N sessions, optionally filtered."}, {"name": "upsert", "description": "Inserts or updates a session in Firestore, handling timestamps and session ID formatting."}, {"name": "delete_session", "description": "Deletes a session by session_id."}, {"name": "drop", "description": "Deletes all documents in the collection, effectively dropping all sessions."}, {"name": "upgrade_schema", "description": "No-op for Firestore as it is schema-less."}], "calls": ["agno.storage.session.agent.AgentSession.from_dict", "agno.storage.session.team.TeamSession.from_dict", "agno.storage.session.workflow.WorkflowSession.from_dict", "log_debug", "logger.error", "google.cloud.firestore_v1.Client", "google.cloud.firestore_v1.CollectionReference", "google.cloud.firestore_v1.DocumentReference", "google.cloud.firestore_v1.Query", "google.cloud.firestore_v1.base_query.FieldFilter"], "search-terms": ["Firestore", "session storage", "Google Cloud Firestore", "session CRUD", "Firestore client initialization", "session query", "session upsert", "session delete"], "state": 2, "file_id": 535, "knowledge_revision": 2804, "git_revision": "0d2dba97c2d7048247d09210f89bfd1b0b189058", "ctags": [], "filename": "libs/agno/agno/storage/firestore.py", "hash": "0fdcf8fa2301694213969a766b386721", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2804": "0d2dba97c2d7048247d09210f89bfd1b0b189058"}]}