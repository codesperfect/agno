{"is_source_file": true, "format": "Python", "description": "This file defines the 'Workflow' class, which manages workflow configurations, execution, session handling, and registration within a larger system. It includes methods for running workflows synchronously and asynchronously, managing storage, and exporting configuration data.", "external_files": ["agno.agent", "agno.media", "agno.memory.v2.memory", "agno.memory.workflow", "agno.run.response", "agno.run.team", "agno.run.workflow", "agno.storage.base", "agno.storage.session.workflow", "agno.team.team", "agno.utils.common", "agno.utils.log", "agno.utils.merge_dict"], "external_methods": ["getenv", "log_debug", "log_warning", "set_log_level_to_debug", "set_log_level_to_info", "nested_model_dump", "merge_dictionaries", "uuid4", "cast"], "published": ["Workflow"], "classes": [{"name": "Workflow", "description": "Represents a configurable, executable workflow with session management, registration, and run capabilities, supporting both sync and async execution."}], "methods": [{"name": "run", "description": "Placeholder method to be overridden by subclasses for synchronous workflow execution."}, {"name": "run_workflow", "description": "Executes the workflow synchronously, handling both generator and direct responses, managing session state, and updating memory."}, {"name": "arun_workflow", "description": "Asynchronously executes the workflow, handling async generators and responses, with session and memory management."}, {"name": "set_storage_mode", "description": "Sets the storage mode to 'workflow' if storage is configured."}, {"name": "set_workflow_id", "description": "Ensures the workflow has a unique ID, generating one if necessary."}, {"name": "set_session_id", "description": "Ensures the session has a unique ID, generating one if necessary."}, {"name": "set_debug", "description": "Configures debug logging based on environment variables or class settings."}, {"name": "set_monitoring", "description": "Overrides monitoring and telemetry settings based on environment variables."}, {"name": "initialize_memory", "description": "Initializes the memory attribute if not already set."}, {"name": "update_run_method", "description": "Detects if subclass overrides run/arun methods and replaces them with run_workflow/arun_workflow."}, {"name": "update_agent_session_ids", "description": "Updates session IDs for all Agent instances within the workflow."}, {"name": "get_workflow_data", "description": "Returns a dictionary with basic workflow metadata."}, {"name": "get_session_data", "description": "Returns a dictionary with current session data, including artifacts and state."}, {"name": "get_workflow_session", "description": "Constructs a WorkflowSession object representing current workflow state for persistence."}, {"name": "load_workflow_session", "description": "Loads workflow state from a given WorkflowSession object."}, {"name": "read_from_storage", "description": "Loads the workflow session from storage if available."}, {"name": "write_to_storage", "description": "Saves the current workflow session to storage."}, {"name": "load_session", "description": "Loads an existing session or creates a new one if none exists."}, {"name": "new_session", "description": "Creates a new session, resetting session state."}, {"name": "log_workflow_session", "description": "Logs current session information for debugging."}, {"name": "rename", "description": "Renames the workflow and persists the change."}, {"name": "rename_session", "description": "Renames the current session and persists the change."}, {"name": "delete_session", "description": "Deletes a specified session from storage."}, {"name": "deep_copy", "description": "Creates a deep copy of the workflow, optionally updating fields."}, {"name": "_deep_copy_field", "description": "Helper for deep copying individual fields based on type."}, {"name": "aregister_workflow", "description": "Asynchronously registers the workflow with an external API."}, {"name": "register_workflow", "description": "Registers the workflow with an external platform, synchronously."}, {"name": "to_config_dict", "description": "Exports the workflow configuration, including agents and teams, as a dictionary."}], "search-terms": ["Workflow class", "session management", "workflow registration", "async workflow execution", "workflow configuration", "agent and team registration", "storage handling", "deep copy workflow"], "state": 2, "file_id": 370, "knowledge_revision": 2658, "git_revision": "c4cabc851178c113c4f14aa2047e2d99383e83c5", "ctags": [], "filename": "libs/agno/agno/workflow/workflow.py", "hash": "73bd50ac7d14889a348063e15cbf3977", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2658": "c4cabc851178c113c4f14aa2047e2d99383e83c5"}]}