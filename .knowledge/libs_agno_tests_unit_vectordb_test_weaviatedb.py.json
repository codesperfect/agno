{"is_source_file": true, "format": "Python", "description": "Unit test suite for the Weaviate vector database integration, including fixtures, mock setups, and tests for collection management, document insertion, search functionalities, and configuration retrieval.", "external_files": ["weaviate.connect_to_local", "agno.document", "agno.vectordb.search", "agno.vectordb.weaviate", "agno.vectordb.weaviate.index"], "external_methods": ["weaviate.connect_to_local", "Mock", "patch", "pytest.fixture", "pytest.mark.asyncio"], "published": ["mock_weaviate_client", "weaviate_db", "sample_documents", "test_create_collection", "test_exists", "test_drop", "test_insert_documents", "test_vector_search", "test_keyword_search", "test_hybrid_search", "test_doc_exists", "test_name_exists", "test_upsert_documents", "test_vector_index_config", "test_get_search_results", "test_async_create", "test_async_exists"], "classes": [{"name": "Document", "description": "Represents a document with content, metadata, and a name, used for testing document-related functionalities."}, {"name": "SearchType", "description": "Enumeration for different search types (e.g., keyword, hybrid, vector)."}, {"name": "Weaviate", "description": "Main class for interacting with the Weaviate vector database, including methods for creating, dropping, inserting, searching, and configuration."}, {"name": "Distance", "description": "Enumeration for distance metrics used in vector indexing, such as COSINE."}, {"name": "VectorIndex", "description": "Enumeration for different vector index types, such as HNSW and FLAT."}], "methods": [{"name": "mock_weaviate_client", "description": "Fixture that creates a mocked Weaviate client with predefined behaviors for testing."}, {"name": "weaviate_db", "description": "Fixture that creates a Weaviate database instance with mocked client and embedder."}, {"name": "sample_documents", "description": "Fixture that provides a list of sample Document objects for testing."}, {"name": "test_create_collection", "description": "Test that verifies collection creation in Weaviate."}, {"name": "test_exists", "description": "Test that checks if the collection existence check works correctly."}, {"name": "test_drop", "description": "Test that verifies collection deletion."}, {"name": "test_insert_documents", "description": "Test that verifies inserting multiple documents into the collection."}, {"name": "test_vector_search", "description": "Test that verifies vector-based search returns expected documents."}, {"name": "test_keyword_search", "description": "Test that verifies keyword search functionality."}, {"name": "test_hybrid_search", "description": "Test that verifies hybrid search combining vector and keyword methods."}, {"name": "test_doc_exists", "description": "Test that checks if document existence verification works."}, {"name": "test_name_exists", "description": "Test that verifies if a document name exists in the collection."}, {"name": "test_upsert_documents", "description": "Test that verifies upserting documents into the collection."}, {"name": "test_vector_index_config", "description": "Test that retrieves and verifies vector index configuration."}, {"name": "test_get_search_results", "description": "Test that parses search results into Document objects."}, {"name": "test_async_create", "description": "Async test for creating a collection."}, {"name": "test_async_exists", "description": "Async test for checking collection existence."}], "calls": ["weaviate.connect_to_local", "Mock()", "patch()", "collection.query.near_vector", "collection.query.bm25", "collection.query.hybrid", "collection.data.insert", "collection.data.exists", "collection.query.fetch_objects", "collection.query.get", "collection.query.delete", "collection.query.create", "collection.query.exists", "collection.query.get", "collection.query.bm25", "collection.query.hybrid", "weaviate_db.create", "weaviate_db.drop", "weaviate_db.insert", "weaviate_db.vector_search", "weaviate_db.search", "weaviate_db.doc_exists", "weaviate_db.name_exists", "weaviate_db.upsert", "weaviate_db.get_vector_index_config", "weaviate_db.get_search_results", "db.async_create", "db.async_exists"], "search-terms": ["unit tests", "weaviate client mock", "vector search", "keyword search", "hybrid search", "collection management", "document existence", "search results parsing", "async collection creation", "async existence check"], "state": 2, "file_id": 684, "knowledge_revision": 2953, "git_revision": "8f7ccd25c54d59526d9e34908bee2e3024620b24", "ctags": [], "filename": "libs/agno/tests/unit/vectordb/test_weaviatedb.py", "hash": "5e85b3ac8f713cecc51c94f9d413c9d6", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2953": "8f7ccd25c54d59526d9e34908bee2e3024620b24"}]}