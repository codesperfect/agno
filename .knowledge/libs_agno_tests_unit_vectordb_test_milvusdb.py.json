{"is_source_file": true, "format": "Python", "description": "Unit tests for the Milvus vector database integration in the agno project, including fixtures, CRUD operations, search, and async methods.", "external_files": ["pymilvus.MilvusClient", "pymilvus.AsyncMilvusClient", "agno.document", "agno.vectordb.distance", "agno.vectordb.milvus"], "external_methods": ["patch", "Mock", "pytest.fixture", "pytest.mark.asyncio", "pytest"], "published": [], "classes": [{"name": "Document", "description": "Represents a document with content, metadata, and name."}, {"name": "Milvus", "description": "A class for interacting with Milvus vector database, including CRUD and search operations."}], "methods": [{"name": "mock_milvus_client", "description": "Fixture to create a mock Milvus client with predefined behaviors."}, {"name": "mock_milvus_async_client", "description": "Fixture to create a mock asynchronous Milvus client."}, {"name": "milvus_db", "description": "Fixture to instantiate a Milvus database object with mocked client."}, {"name": "sample_documents", "description": "Fixture to generate sample Document instances for testing."}, {"name": "test_create_collection", "description": "Test for creating a collection in Milvus."}, {"name": "test_exists", "description": "Test for checking if a collection exists."}, {"name": "test_drop", "description": "Test for dropping a collection."}, {"name": "test_insert_documents", "description": "Test for inserting documents into Milvus."}, {"name": "test_doc_exists", "description": "Test for checking if a document exists."}, {"name": "test_name_exists", "description": "Test for checking if a name exists in the collection."}, {"name": "test_id_exists", "description": "Test for checking if an ID exists."}, {"name": "test_upsert_documents", "description": "Test for upserting documents."}, {"name": "test_upsert_available", "description": "Test for verifying upsert availability."}, {"name": "test_search", "description": "Test for searching documents."}, {"name": "test_get_count", "description": "Test for retrieving collection document count."}, {"name": "test_distance_setting", "description": "Test for verifying distance metric settings."}, {"name": "_build_expr", "description": "Method for constructing query expressions based on filters."}, {"name": "test_async_create", "description": "Async test for creating a collection."}, {"name": "test_async_exists", "description": "Async test for checking collection existence."}, {"name": "test_async_search", "description": "Async test for searching documents."}, {"name": "async_return", "description": "Helper async function returning a result."}, {"name": "test_async_doc_exists", "description": "Async test for document existence."}, {"name": "test_async_insert", "description": "Async test for inserting documents."}, {"name": "test_async_upsert", "description": "Async test for upserting documents."}, {"name": "test_async_drop", "description": "Async test for dropping a collection."}], "calls": ["patch", "Mock", "pytest.fixture", "pytest.mark.asyncio", "pytest", "pymilvus.MilvusClient", "pymilvus.AsyncMilvusClient", "Milvus", "Mock()", "mock_client_class.return_value", "mock_async_client_class.return_value", "milvus_db.exists", "milvus_db.create", "milvus_db.drop", "milvus_db.insert", "milvus_db.doc_exists", "milvus_db.name_exists", "milvus_db.id_exists", "milvus_db.upsert", "milvus_db.upsert_available", "milvus_db.search", "milvus_db.get_count", "milvus_db._build_expr", "milvus_db.async_create", "milvus_db.async_exists", "milvus_db.async_search", "milvus_db.async_doc_exists", "milvus_db.async_insert", "milvus_db.async_upsert", "milvus_db.async_drop"], "search-terms": ["Milvus", "vector database", "unit tests", "async methods", "mocked client", "collection operations", "document search", "distance metrics", "test fixtures", "collection creation", "collection existence", "document insertion", "search results", "collection count"], "state": 2, "file_id": 683, "knowledge_revision": 2943, "git_revision": "167629ed14b183b3184483e3b7ce1e40719a4e38", "ctags": [], "filename": "libs/agno/tests/unit/vectordb/test_milvusdb.py", "hash": "cf16f34e0b31a1a0f591e6fff498e253", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2943": "167629ed14b183b3184483e3b7ce1e40719a4e38"}]}