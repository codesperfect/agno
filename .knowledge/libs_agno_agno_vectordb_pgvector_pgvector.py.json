{"is_source_file": true, "format": "Python", "description": "This file defines the PgVector class, which manages vector data storage and retrieval in a PostgreSQL database using the pgvector extension. It includes methods for creating, inserting, searching, and indexing vector data, as well as handling schema versions and index optimization.", "external_files": ["sqlalchemy.dialects.postgresql", "sqlalchemy.engine", "sqlalchemy.inspection", "sqlalchemy.orm", "sqlalchemy.schema", "sqlalchemy.sql.expression", "sqlalchemy.types", "pgvector.sqlalchemy", "agno.document", "agno.embedder", "agno.reranker.base", "agno.utils.log", "agno.vectordb.base", "agno.vectordb.distance", "agno.vectordb.pgvector.index", "agno.vectordb.search"], "external_methods": ["create_engine", "inspect", "scoped_session", "sessionmaker", "Column", "Index", "MetaData", "Table", "bindparam", "desc", "func", "select", "text", "DateTime", "String", "Vector", "Document", "Embedder", "Reranker", "log_debug", "log_info", "logger", "VectorDb", "Distance", "HNSW", "Ivfflat", "SearchType"], "published": ["PgVector"], "classes": [{"name": "PgVector", "description": "A class for managing vector data in PostgreSQL using pgvector, including creation, insertion, search, indexing, and schema management."}], "methods": [{"name": "__init__", "description": "Initializes the PgVector instance with configuration parameters, setting up database connection, embedder, and schema details."}, {"name": "get_table_v1", "description": "Defines the SQLAlchemy Table schema for version 1."}, {"name": "get_table", "description": "Returns the SQLAlchemy Table object based on the current schema version."}, {"name": "table_exists", "description": "Checks if the database table exists."}, {"name": "create", "description": "Creates the table and necessary extensions/schema if they do not exist."}, {"name": "async_create", "description": "Asynchronously creates the table."}, {"name": "_record_exists", "description": "Checks if a record with a specific column value exists."}, {"name": "doc_exists", "description": "Checks if a document with the same content hash exists."}, {"name": "async_doc_exists", "description": "Asynchronously checks if a document exists."}, {"name": "name_exists", "description": "Checks if a document with the given name exists."}, {"name": "async_name_exists", "description": "Asynchronously checks if a name exists."}, {"name": "id_exists", "description": "Checks if a document with the given ID exists."}, {"name": "_clean_content", "description": "Replaces null characters in content with Unicode replacement character."}, {"name": "insert", "description": "Inserts a list of documents into the database in batches."}, {"name": "async_insert", "description": "Asynchronously inserts documents."}, {"name": "upsert_available", "description": "Indicates that upsert operation is supported."}, {"name": "upsert", "description": "Performs an upsert (insert or update) of documents."}, {"name": "async_upsert", "description": "Asynchronously performs an upsert."}, {"name": "search", "description": "Performs a search based on the configured search type (vector, keyword, hybrid)."}, {"name": "async_search", "description": "Asynchronously performs a search."}, {"name": "vector_search", "description": "Performs a vector similarity search."}, {"name": "enable_prefix_matching", "description": "Prepares a query string for prefix matching by appending '*' to each word."}, {"name": "keyword_search", "description": "Performs a keyword search on the content column."}, {"name": "hybrid_search", "description": "Performs a hybrid search combining vector similarity and full-text search."}, {"name": "drop", "description": "Drops the table from the database."}, {"name": "async_drop", "description": "Asynchronously drops the table."}, {"name": "exists", "description": "Checks if the table exists."}, {"name": "async_exists", "description": "Asynchronously checks if the table exists."}, {"name": "get_count", "description": "Returns the number of records in the table."}, {"name": "optimize", "description": "Creates or recreates indexes for optimization."}, {"name": "_index_exists", "description": "Checks if an index with a given name exists."}, {"name": "_drop_index", "description": "Drops an index by name."}, {"name": "_create_vector_index", "description": "Creates or recreates the vector index."}, {"name": "_create_ivfflat_index", "description": "Creates an Ivfflat index."}, {"name": "_create_hnsw_index", "description": "Creates an HNSW index."}, {"name": "_create_gin_index", "description": "Creates or recreates the GIN index for full-text search."}, {"name": "delete", "description": "Deletes all records from the table."}, {"name": "__deepcopy__", "description": "Creates a deep copy of the PgVector instance, handling unpickleable attributes."}], "calls": ["create_engine", "inspect", "sessionmaker", "scoped_session", "text", "select", "func.now", "logger.error", "logger.info", "log_debug", "log_info", "self.table.create", "self.table.drop", "self.Session", "self.table", "self.get_table", "self.table_exists", "self._index_exists", "self._drop_index", "self._create_ivfflat_index", "self._create_hnsw_index", "self._create_gin_index", "self.create", "self.drop", "self.insert", "self.upsert", "self.search", "self.vector_search", "self.keyword_search", "self.hybrid_search", "self.get_count", "self.optimize", "self.exists", "self.delete"], "search-terms": ["PgVector", "vector operations", "PostgreSQL", "pgvector extension", "vector index", "Ivfflat", "HNSW", "vector search", "full-text search", "schema version", "index management", "vector index creation", "hybrid search", "vector similarity", "text search", "index optimization"], "state": 2, "file_id": 584, "knowledge_revision": 2878, "git_revision": "51d29600f651772887cf01513b17ff53b512b134", "ctags": [], "filename": "libs/agno/agno/vectordb/pgvector/pgvector.py", "hash": "5227f6042f4ec1ed35bac1ec3e9fe8c2", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2878": "51d29600f651772887cf01513b17ff53b512b134"}]}