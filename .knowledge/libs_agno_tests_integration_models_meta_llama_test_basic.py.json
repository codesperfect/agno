{"is_source_file": true, "format": "Python", "description": "This file contains test cases for the 'Llama' model integration with the 'Agent' class, including synchronous and asynchronous tests, memory handling, structured output, JSON mode, and storage interactions, primarily using pytest framework.", "external_files": ["pytest", "pydantic", "agno.agent", "agno.models.meta.llama", "agno.storage.sqlite"], "external_methods": ["pytest.mark.asyncio", "pytest", "BaseModel", "Field", "Agent", "RunResponse", "Llama", "SqliteStorage"], "published": ["test_basic", "test_basic_stream", "test_async_basic", "test_async_basic_stream", "test_with_memory", "test_structured_output", "test_json_response_mode", "test_history"], "classes": [{"name": "MovieScript", "description": "A Pydantic model used for structured movie script output with fields for title, genre, and plot."}], "methods": [{"name": "_assert_metrics", "description": "Helper function to assert that the metrics in the response contain positive token counts and that total tokens equal the sum of input and output tokens."}, {"name": "test_basic", "description": "Tests the basic synchronous run of the Llama model via the Agent, verifying response content, message roles, and metrics."}, {"name": "test_basic_stream", "description": "Tests streaming responses from the agent, verifying iterator behavior and response content."}, {"name": "test_async_basic", "description": "Asynchronous test for the agent's run method, verifying response content and message roles."}, {"name": "test_async_basic_stream", "description": "Asynchronous test for streaming responses, verifying content is received asynchronously."}, {"name": "test_with_memory", "description": "Tests the agent's memory feature, ensuring conversation history is maintained and reflected in responses."}, {"name": "test_structured_output", "description": "Tests the agent's ability to produce structured output conforming to the MovieScript model."}, {"name": "test_json_response_mode", "description": "Tests the agent's JSON mode, ensuring structured responses are correctly parsed."}, {"name": "test_history", "description": "Tests the storage and retrieval of conversation history using SqliteStorage."}], "calls": ["agno.agent.Agent.run", "agno.agent.Agent.arun", "agno.agent.Agent.get_messages_for_session", "agno.models.meta.llama.Llama", "agno.storage.sqlite.SqliteStorage", "pytest.mark.asyncio"], "search-terms": ["pytest", "Llama", "Agent", "structured output", "memory", "asyncio", "sqlite storage", "test cases", "model integration", "streaming responses"], "state": 2, "file_id": 808, "knowledge_revision": 3049, "git_revision": "777260577abc1ec1fbdfa141f65351510b5775ee", "ctags": [], "filename": "libs/agno/tests/integration/models/meta/llama/test_basic.py", "hash": "7f9f9236a2c705f11ff64d0b24784b46", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"3049": "777260577abc1ec1fbdfa141f65351510b5775ee"}]}