{"is_source_file": true, "format": "Python", "description": "This file implements a MongoDB-backed vector database class with support for Atlas Search and Cosmos DB compatibility, including methods for collection management, indexing, document insertion, and hybrid search functionalities.", "external_files": ["bson.ObjectId", "agno.document.Document", "agno.embedder.Embedder", "agno.utils.log.log_debug", "agno.utils.log.log_info", "agno.utils.log.log_warning", "agno.utils.log.logger", "agno.vectordb.base.VectorDb", "agno.vectordb.distance.Distance", "agno.vectordb.search.SearchType", "hashlib.md5", "pymongo.AsyncMongoClient", "pymongo.MongoClient", "pymongo.errors", "pymongo.collection.Collection", "pymongo.operations.SearchIndexModel"], "external_methods": ["hashlib.md5", "pymongo.MongoClient", "pymongo.errors", "pymongo.collection.Collection", "pymongo.operations.SearchIndexModel"], "published": ["MongoDb"], "classes": [{"name": "MongoDb", "description": "A class providing a MongoDB implementation of a vector database with support for Atlas Search and Cosmos DB compatibility, including collection management, indexing, document CRUD, and hybrid search."}], "methods": [{"name": "_get_client", "description": "Creates or retrieves the MongoDB client, handling both standard and Cosmos DB configurations."}, {"name": "_get_async_client", "description": "Creates or retrieves the asynchronous MongoDB client."}, {"name": "_get_or_create_collection", "description": "Gets or creates the MongoDB collection, including index creation if necessary."}, {"name": "_get_collection", "description": "Retrieves the MongoDB collection, creating it if it does not exist."}, {"name": "_create_search_index", "description": "Creates or overwrites the Atlas Search index, with special handling for Cosmos DB."}, {"name": "_create_search_index_async", "description": "Asynchronous version of creating the Atlas Search index."}, {"name": "_search_index_exists", "description": "Checks if the search index exists in the collection."}, {"name": "_wait_for_index_ready", "description": "Waits until the Atlas Search index is ready."}, {"name": "_wait_for_index_ready_async", "description": "Asynchronously waits for the Atlas Search index to be ready."}, {"name": "collection_exists", "description": "Checks if the collection exists in the database."}, {"name": "create", "description": "Creates the collection and indexes if they do not exist."}, {"name": "async_create", "description": "Asynchronously creates the collection and indexes."}, {"name": "doc_exists", "description": "Checks if a document exists based on its content hash."}, {"name": "name_exists", "description": "Checks if a document with a specific name exists."}, {"name": "id_exists", "description": "Checks if a document with a specific ID exists."}, {"name": "insert", "description": "Inserts multiple documents into the collection."}, {"name": "upsert", "description": "Upserts documents into the collection."}, {"name": "upsert_available", "description": "Indicates that upsert functionality is available."}, {"name": "search", "description": "Performs a vector or hybrid search for documents based on a query."}, {"name": "vector_search", "description": "Performs a vector similarity search."}, {"name": "keyword_search", "description": "Performs a keyword-based search."}, {"name": "hybrid_search", "description": "Performs a hybrid search combining vector and keyword search with RRF."}, {"name": "drop", "description": "Drops the collection and associated indexes."}, {"name": "exists", "description": "Checks if the collection exists."}, {"name": "optimize", "description": "Placeholder for optimization (not implemented)."}, {"name": "delete", "description": "Deletes all documents from the collection."}, {"name": "prepare_doc", "description": "Prepares a document for insertion, including embedding and hashing."}, {"name": "get_count", "description": "Returns the number of documents in the collection."}, {"name": "async_doc_exists", "description": "Asynchronously checks if a document exists based on its content hash."}, {"name": "async_insert", "description": "Asynchronously inserts multiple documents."}, {"name": "async_upsert", "description": "Asynchronously upserts documents."}, {"name": "async_search", "description": "Performs an asynchronous search for documents."}, {"name": "async_drop", "description": "Asynchronously drops the collection."}, {"name": "async_exists", "description": "Checks asynchronously if the collection exists."}, {"name": "async_name_exists", "description": "Checks asynchronously if a document with a specific name exists."}, {"name": "_get_cosmos_similarity_metric", "description": "Converts the distance metric to Cosmos DB format."}, {"name": "_convert_objectids_to_strings", "description": "Recursively converts ObjectIds in data structures to strings."}], "search-terms": ["MongoDB vector database", "Atlas Search index", "hybrid search", "cosmosDB compatibility", "vector similarity", "document insertion", "async MongoDB", "search index management", "vector search pipeline", "hybrid RRF"], "state": 2, "file_id": 564, "knowledge_revision": 2844, "git_revision": "9c5ee3429e3c6d5d30c8f7714d2df7f0f86f305d", "ctags": [], "filename": "libs/agno/agno/vectordb/mongodb/mongodb.py", "hash": "cb797f38845553404457bdedc61ab03d", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2844": "9c5ee3429e3c6d5d30c8f7714d2df7f0f86f305d"}]}