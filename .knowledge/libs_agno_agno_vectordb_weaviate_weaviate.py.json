{"is_source_file": true, "format": "Python", "description": "This file defines a Python class 'Weaviate' for managing vector database operations with the Weaviate v4 client, including connection handling, collection management, document existence checks, insertion, upsertion, and various search methods (vector, keyword, hybrid), both synchronously and asynchronously. It also includes configuration for vector index and distance metrics, and processes responses into Document objects.", "external_files": ["weaviate", "weaviate.classes.config", "weaviate.classes.init", "weaviate.classes.query", "agno.document", "agno.embedder", "agno.reranker.base", "agno.utils.log", "agno.vectordb.base", "agno.vectordb.search", "agno.vectordb.weaviate.index"], "external_methods": ["weaviate.connect_to_weaviate_cloud", "weaviate.connect_to_local", "weaviate.use_async_with_weaviate_cloud", "weaviate.use_async_with_local", "collection.is_ready", "collection.data.exists", "collection.data.insert", "collection.data.replace", "collection.query.fetch_objects", "collection.query.bm25", "collection.query.near_vector", "collection.query.hybrid", "collection.exists", "collection.delete", "weaviate.connect_to_weaviate_cloud", "weaviate.connect_to_local", "weaviate.use_async_with_weaviate_cloud", "weaviate.use_async_with_local"], "published": ["Weaviate"], "classes": [{"name": "Weaviate", "description": "A class for managing vector operations with Weaviate database, including connection handling, collection management, document existence checks, insertion, upsertion, and various search methods (vector, keyword, hybrid), both synchronously and asynchronously. It also manages configuration for vector index and distance metrics, and processes responses into Document objects."}], "methods": [{"name": "get_client", "description": "Initializes and returns a singleton Weaviate client, connecting via cloud or local depending on configuration."}, {"name": "get_async_client", "description": "Asynchronously initializes and returns a singleton Weaviate async client."}, {"name": "create", "description": "Creates the collection in Weaviate if it does not already exist."}, {"name": "async_create", "description": "Asynchronously creates the collection in Weaviate if it does not already exist."}, {"name": "doc_exists", "description": "Checks if a document exists in the collection based on a UUID generated from its content."}, {"name": "async_doc_exists", "description": "Asynchronously checks if a document exists in the collection based on a UUID generated from its content."}, {"name": "name_exists", "description": "Checks if a document with a specific name exists in the collection."}, {"name": "async_name_exists", "description": "Asynchronously checks if a document with a specific name exists in the collection."}, {"name": "insert", "description": "Inserts a list of documents into the collection, embedding them and storing their properties."}, {"name": "async_insert", "description": "Asynchronously inserts a list of documents into the collection, embedding them and storing their properties."}, {"name": "upsert", "description": "Upserts (inserts or replaces) documents into the collection synchronously."}, {"name": "async_upsert", "description": "Asynchronously upserts (inserts or replaces) documents into the collection."}, {"name": "search", "description": "Performs a search based on the configured search type (vector, keyword, hybrid)."}, {"name": "async_search", "description": "Performs an asynchronous search based on the configured search type."}, {"name": "vector_search", "description": "Performs a vector similarity search."}, {"name": "async_vector_search", "description": "Performs an asynchronous vector similarity search."}, {"name": "keyword_search", "description": "Performs a keyword-based search."}, {"name": "async_keyword_search", "description": "Performs an asynchronous keyword-based search."}, {"name": "hybrid_search", "description": "Performs a hybrid search combining vector and keyword methods."}, {"name": "async_hybrid_search", "description": "Performs an asynchronous hybrid search."}, {"name": "exists", "description": "Checks if the collection exists."}, {"name": "async_exists", "description": "Asynchronously checks if the collection exists."}, {"name": "drop", "description": "Deletes the collection."}, {"name": "async_drop", "description": "Asynchronously deletes the collection."}, {"name": "optimize", "description": "Placeholder for optimizing the database (e.g., rebuilding indexes)."}, {"name": "delete", "description": "Deletes all records from the collection."}, {"name": "get_vector_index_config", "description": "Returns the vector index configuration based on index type and distance metric."}, {"name": "get_search_results", "description": "Converts Weaviate response objects into Document instances."}, {"name": "_build_filter_expression", "description": "Builds a filter expression for queries based on provided filters."}], "search-terms": ["Weaviate", "vector database", "async client", "collection management", "document existence", "vector search", "hybrid search", "filter expression", "index configuration", "document insertion"], "state": 2, "file_id": 562, "knowledge_revision": 2846, "git_revision": "167629ed14b183b3184483e3b7ce1e40719a4e38", "ctags": [], "filename": "libs/agno/agno/vectordb/weaviate/weaviate.py", "hash": "829a387da925323363e85d755d974284", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2846": "167629ed14b183b3184483e3b7ce1e40719a4e38"}]}