{"is_source_file": true, "format": "Python", "description": "Test suite for the TextReader class in the agno document reading module, including unit tests for reading text files, bytesIO objects, chunking, encoding errors, and asynchronous reading.", "external_files": ["agno/document/base.py", "agno/document/reader/text_reader.py"], "external_methods": ["pytest.fixture", "pytest.mark.asyncio", "BytesIO.encode", "BytesIO.name", "Path.write_text", "Path.exists", "Path.unlink", "open", "patch"], "published": [], "classes": [], "methods": [{"name": "test_read_text_file_path", "description": "Tests reading a text file from a temporary path and verifies content and filename."}, {"name": "test_read_text_bytesio", "description": "Tests reading from a BytesIO object with text data."}, {"name": "test_chunking", "description": "Tests chunking functionality of the TextReader, mocking the chunk_document method."}, {"name": "test_file_not_found", "description": "Tests behavior when reading a nonexistent file."}, {"name": "test_unsupported_file_type", "description": "Tests behavior when reading an unsupported file type (string not path or BytesIO)."}, {"name": "test_empty_text_file", "description": "Tests handling of an empty text file."}, {"name": "test_unicode_content", "description": "Tests reading Unicode content from a file."}, {"name": "test_large_text_file", "description": "Tests reading a large text file and chunking into multiple documents."}, {"name": "test_invalid_encoding", "description": "Tests handling of invalid UTF-8 encoding."}, {"name": "test_cp950_encoding", "description": "Tests handling of a CP-950 encoded file, expecting no documents due to unsupported encoding."}, {"name": "test_async_read_text_file_path", "description": "Asynchronous test for reading a text file from a path."}, {"name": "test_async_read_text_bytesio", "description": "Asynchronous test for reading from a BytesIO object."}, {"name": "test_async_chunking", "description": "Asynchronous test for chunking functionality with mocked chunk_document."}, {"name": "test_async_file_not_found", "description": "Async test for handling nonexistent file."}, {"name": "test_async_unsupported_file_type", "description": "Async test for unsupported file type input."}, {"name": "test_async_empty_text_file", "description": "Async test for reading an empty text file."}, {"name": "test_async_unicode_content", "description": "Async test for reading Unicode content."}, {"name": "test_async_large_text_file", "description": "Async test for large text file with chunking."}, {"name": "test_async_with_aiofiles", "description": "Async test mocking aiofiles for reading file content."}, {"name": "test_async_without_aiofiles", "description": "Async test handling ImportError when aiofiles is unavailable."}, {"name": "test_async_invalid_encoding", "description": "Async test for invalid encoding handling."}, {"name": "test_async_parallel_chunking", "description": "Async test for parallel chunking with mocked async chunk processor."}], "search-terms": ["TextReader", "unit tests", "async read", "chunking", "file encoding", "BytesIO", "file not found", "unsupported file type", "large file", "Unicode content", "aoi files", "pytest"], "state": 2, "file_id": 610, "knowledge_revision": 2861, "git_revision": "235e19d6998790dd527e8a43710990aef29359b1", "ctags": [], "filename": "libs/agno/tests/unit/reader/test_text_reader.py", "hash": "e8d2147c9910929f0925a5cf2d055546", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2861": "235e19d6998790dd527e8a43710990aef29359b1"}]}