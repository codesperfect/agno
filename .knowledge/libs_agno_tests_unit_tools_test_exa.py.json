{"is_source_file": true, "format": "Python", "description": "This file contains unit tests for the ExaTools class, testing various functionalities including search, content retrieval, similarity search, answer generation, and research workflows with mock objects and fixtures.", "external_files": ["exa_py", "exa_py.api", "agno.tools.exa"], "external_methods": ["exa_py.Exa", "exa_py.api.SearchResponse", "agno.tools.exa.ExaTools", "unittest.mock.Mock", "unittest.mock.patch", "pytest"], "published": [], "classes": [], "methods": [{"name": "mock_exa_client", "description": "Creates a mock Exa API client for testing."}, {"name": "exa_tools", "description": "Creates an ExaTools instance with a mocked API client."}, {"name": "create_mock_search_result", "description": "Helper function to create mock search result objects with specified attributes."}, {"name": "test_init_with_api_key", "description": "Tests initialization of ExaTools with an API key."}, {"name": "test_init_with_selective_tools", "description": "Tests initialization of ExaTools with specific tools enabled or disabled."}, {"name": "test_search_exa_success", "description": "Tests successful search operation and result parsing."}, {"name": "test_get_contents_success", "description": "Tests successful content retrieval."}, {"name": "test_find_similar_success", "description": "Tests successful similar content search."}, {"name": "test_exa_answer_success", "description": "Tests successful answer generation."}, {"name": "test_search_with_category", "description": "Tests search with category filter."}, {"name": "test_error_handling", "description": "Tests error handling in various methods."}, {"name": "_parse_results", "description": "Internal method to parse search response results into JSON."}, {"name": "test_parse_results_with_missing_fields", "description": "Tests parsing results with missing optional fields."}, {"name": "test_text_length_limit", "description": "Tests limiting of text length in search results."}, {"name": "test_exa_answer_with_model_selection", "description": "Tests answer generation with different model options."}, {"name": "test_init_with_research_tool", "description": "Tests initialization with research tool enabled."}, {"name": "test_research_success", "description": "Tests successful research workflow with mock task and citations."}, {"name": "test_research_with_string_query", "description": "Tests research workflow with a simple string query."}, {"name": "test_research_timeout", "description": "Tests handling of timeout during research."}, {"name": "test_research_error_handling", "description": "Tests error handling during research process."}], "calls": ["exa_py.Exa", "exa_py.api.SearchResponse", "agno.tools.exa.ExaTools", "patch", "patch.dict", "Mock", "mock_exa_client.search_and_contents", "mock_exa_client.get_contents", "mock_exa_client.find_similar_and_contents", "mock_exa_client.answer", "mock_exa_client.research", "mock_research_client.create_task", "mock_research_client.poll_task"], "search-terms": ["unit tests", "ExaTools", "search_exa", "get_contents", "find_similar", "exa_answer", "research", "mock", "pytest"], "state": 2, "file_id": 657, "knowledge_revision": 2920, "git_revision": "577b1c6f362bc2d75dd45816763c2b5acef825f3", "ctags": [], "filename": "libs/agno/tests/unit/tools/test_exa.py", "hash": "98a4b0d37d0b031d93cfff7179e7704a", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2920": "577b1c6f362bc2d75dd45816763c2b5acef825f3"}]}