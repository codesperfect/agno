{"is_source_file": true, "format": "Python", "description": "This file contains unit tests for the ValyuTools class, including mock classes, fixtures, and test cases for various search functionalities and initialization scenarios.", "external_files": ["agno.tools.valyu", "pytest", "unittest.mock"], "external_methods": ["pytest.raises", "patch", "patch.dict"], "published": ["MockSearchResult", "MockSearchResponse", "test_init_with_api_key", "test_init_without_api_key_raises_error", "test_init_with_env_api_key", "test_parse_results_basic", "test_parse_results_with_text_truncation", "test_parse_results_empty", "test_search_academic_sources_success", "test_search_academic_sources_with_dates", "test_search_web_success", "test_search_web_with_category", "test_search_within_paper_success", "test_search_within_paper_invalid_url", "test_search_api_error", "test_search_exception_handling", "test_constructor_parameters_used_in_search", "test_method_parameters_override_constructor", "test_tools_registration"], "classes": [{"name": "MockSearchResult", "description": "Mock class simulating a search result with attributes like title, url, content, source, relevance_score, and description."}, {"name": "MockSearchResponse", "description": "Mock class simulating a search response with success status, results list, and error message."}], "methods": [{"name": "mock_valyu", "description": "Fixture that patches the 'Valyu' class in 'agno.tools.valyu' and yields the mock object."}, {"name": "valyu_tools", "description": "Fixture that initializes and returns a 'ValyuTools' instance with a test API key."}, {"name": "test_init_with_api_key", "description": "Tests that 'ValyuTools' initializes correctly with a provided API key."}, {"name": "test_init_without_api_key_raises_error", "description": "Tests that initializing 'ValyuTools' without an API key raises a ValueError."}, {"name": "test_init_with_env_api_key", "description": "Tests that 'ValyuTools' correctly reads API key from environment variable."}, {"name": "test_parse_results_basic", "description": "Verifies parsing of a basic search result."}, {"name": "test_parse_results_with_text_truncation", "description": "Verifies that content is truncated according to 'text_length' setting."}, {"name": "test_parse_results_empty", "description": "Verifies parsing behavior with an empty results list."}, {"name": "test_search_academic_sources_success", "description": "Tests successful search for academic sources and correct parameters."}, {"name": "test_search_academic_sources_with_dates", "description": "Tests search with date filters."}, {"name": "test_search_web_success", "description": "Tests successful web search."}, {"name": "test_search_web_with_category", "description": "Tests web search with a specified content category."}, {"name": "test_search_within_paper_success", "description": "Tests within-paper search with a valid URL."}, {"name": "test_search_within_paper_invalid_url", "description": "Tests within-paper search with an invalid URL."}, {"name": "test_search_api_error", "description": "Tests handling of API error responses."}, {"name": "test_search_exception_handling", "description": "Tests exception handling during search calls."}, {"name": "test_constructor_parameters_used_in_search", "description": "Verifies that constructor parameters are used in search calls."}, {"name": "test_method_parameters_override_constructor", "description": "Verifies method parameters override constructor defaults."}, {"name": "test_tools_registration", "description": "Checks that all expected tools are registered in the 'functions' attribute."}], "calls": ["agno.tools.valyu.Valyu", "pytest.raises", "patch", "patch.dict"], "search-terms": ["ValyuTools", "unit tests", "mock search result", "search functions", "pytest fixtures", "test within paper", "search parameters", "API key handling", "search response mock", "test case"], "state": 2, "file_id": 644, "knowledge_revision": 2893, "git_revision": "347ea759f2feabf467b798b17a9a9eaa5667958f", "ctags": [], "filename": "libs/agno/tests/unit/tools/test_valyu.py", "hash": "a6cea29952118857972ed7b1c08a044d", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2893": "347ea759f2feabf467b798b17a9a9eaa5667958f"}]}