{"is_source_file": true, "format": "Python", "description": "This file defines a SqliteStorage class that provides an interface for storing and managing session data in a SQLite database using SQLAlchemy. It includes methods for creating tables, reading, upserting, deleting sessions, and handling schema upgrades, tailored for different session types such as agent, team, and workflow.", "external_files": ["agno/storage/base.py", "agno/storage/session.py", "agno/storage/session/agent.py", "agno/storage/session/team.py", "agno/storage/session/workflow.py", "agno/utils/log.py", "sqlalchemy.dialects", "sqlalchemy.engine", "sqlalchemy.inspection", "sqlalchemy.orm", "sqlalchemy.schema", "sqlalchemy.sql", "sqlalchemy.types"], "external_methods": ["create_engine", "inspect", "sessionmaker", "select", "text", "AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict", "log_debug", "log_info", "log_warning", "logger"], "published": ["SqliteStorage"], "classes": [{"name": "SqliteStorage", "description": "A class that manages session storage in a SQLite database, supporting schema creation, reading, upserting, deletion, and schema upgrades, with support for different session modes (agent, team, workflow)."}], "methods": [{"name": "get_table_v1", "description": "Defines the table schema for version 1, including common columns and mode-specific columns."}, {"name": "get_table", "description": "Returns the current table schema based on the schema version."}, {"name": "table_exists", "description": "Checks if the storage table exists in the database."}, {"name": "create", "description": "Creates the storage table if it does not already exist."}, {"name": "read", "description": "Reads a session from the database by session ID and optional user ID."}, {"name": "get_all_session_ids", "description": "Retrieves all session IDs, optionally filtered by user ID and entity ID."}, {"name": "get_all_sessions", "description": "Retrieves all sessions, optionally filtered by user ID and entity ID."}, {"name": "get_recent_sessions", "description": "Retrieves the most recent sessions, ordered by creation time, limited by a specified number."}, {"name": "upgrade_schema", "description": "Handles schema upgrades, such as adding new columns, if auto-upgrade is enabled."}, {"name": "upsert", "description": "Inserts or updates a session in the database, with automatic schema upgrade if needed."}, {"name": "delete_session", "description": "Deletes a session from the database by session ID."}, {"name": "drop", "description": "Drops the storage table from the database."}, {"name": "__deepcopy__", "description": "Creates a deep copy of the SqliteStorage instance, handling unpickleable attributes."}], "calls": ["create_engine", "inspect", "sessionmaker", "select", "text", "AgentSession.from_dict", "TeamSession.from_dict", "WorkflowSession.from_dict", "sess.execute", "sess.begin", "sess.commit", "self.get_table", "self.table_exists", "self.create", "self.upgrade_schema", "self.table.drop"], "search-terms": ["SqliteStorage", "session storage", "schema upgrade", "agent session", "team session", "workflow session", "SQLite database", "SQLAlchemy", "session upsert", "session delete"], "state": 2, "file_id": 522, "knowledge_revision": 2785, "git_revision": "88b8f942458a148da343660694036160a152bdf2", "ctags": [], "filename": "libs/agno/agno/storage/sqlite.py", "hash": "e26f0143ec3f426eb03fdfb0537a9621", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2785": "88b8f942458a148da343660694036160a152bdf2"}]}