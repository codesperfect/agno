{"is_source_file": true, "format": "Python", "description": "Unit tests for the FirecrawlReader class in the agno document reading module, testing both synchronous and asynchronous methods, including mocking external dependencies and various edge cases.", "external_files": ["agno/document/base.py", "agno/document/chunking/fixed.py", "agno/document/reader/firecrawl_reader.py"], "external_methods": ["agno.document.reader.firecrawl_reader.FirecrawlApp", "pytest.fixture", "pytest.raises", "pytest.mark.asyncio", "asyncio.to_thread", "unittest.mock.patch"], "published": [], "classes": [], "methods": [{"name": "mock_scrape_response", "description": "Fixture providing a mock response for the scrape_url method."}, {"name": "mock_crawl_response", "description": "Fixture providing a mock response for the crawl_url method."}, {"name": "test_scrape_basic", "description": "Tests the basic scraping functionality of FirecrawlReader with mocked FirecrawlApp."}, {"name": "test_scrape_with_api_key_and_params", "description": "Tests scraping with an API key and custom parameters."}, {"name": "test_scrape_with_api_key_and_formats_params", "description": "Tests scraping with API key and formats parameter."}, {"name": "test_scrape_empty_response", "description": "Tests handling of empty response from scrape_url."}, {"name": "test_scrape_none_content", "description": "Tests handling of None content from scrape_url."}, {"name": "test_scrape_with_chunking", "description": "Tests scraping with chunking enabled, mocking chunk_document."}, {"name": "test_crawl_basic", "description": "Tests the basic crawling functionality with mocked FirecrawlApp."}, {"name": "test_crawl_empty_response", "description": "Tests handling of empty response from crawl_url."}, {"name": "test_crawl_empty_data", "description": "Tests handling of empty data array from crawl_url."}, {"name": "test_crawl_with_chunking", "description": "Tests crawling with chunking enabled, mocking chunk_document."}, {"name": "test_read_scrape_mode", "description": "Tests the read method in scrape mode, ensuring correct method calls."}, {"name": "test_read_crawl_mode", "description": "Tests the read method in crawl mode, ensuring correct method calls."}, {"name": "test_read_invalid_mode", "description": "Tests that an invalid mode raises NotImplementedError."}, {"name": "test_async_scrape_basic", "description": "Asynchronous test for basic scraping functionality."}, {"name": "test_async_crawl_basic", "description": "Asynchronous test for basic crawling functionality."}, {"name": "test_async_read_scrape_mode", "description": "Asynchronous test for read method in scrape mode."}, {"name": "test_async_read_crawl_mode", "description": "Asynchronous test for read method in crawl mode."}, {"name": "test_async_read_invalid_mode", "description": "Asynchronous test that invalid mode raises NotImplementedError."}], "search-terms": ["FirecrawlReader", "firecrawl", "scrape_url", "crawl_url", "async_scrape", "async_crawl", "chunk_document", "FixedSizeChunking", "unit tests", "mock", "pytest", "asyncio"], "state": 2, "file_id": 618, "knowledge_revision": 2873, "git_revision": "f8bcda74cf0b038aa5665ba52633c55cb51f3699", "ctags": [], "filename": "libs/agno/tests/unit/reader/test_firecrawl_reader.py", "hash": "23d747e14fd419890b623ab635b01840", "format-version": 4, "code-base-name": "https://github.com/codesperfect/agno.git:main", "revision_history": [{"2873": "f8bcda74cf0b038aa5665ba52633c55cb51f3699"}]}